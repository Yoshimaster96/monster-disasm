	.base $8000
	.org $8000
;BANK NUMBER
	.db $34

;;;;;;;;;;;;;;;;;;;;;
;ENEMY VRAM ROUTINES;
;;;;;;;;;;;;;;;;;;;;;
WriteElevatorVRAMStrip34:
	;Save X register
	stx $05
	;Check if already inited
	ldy ElevatorInitFlag
	beq WriteElevatorVRAMStrip34_Init
	jmp WriteEnemyVRAMStrip34_NoInit
WriteElevatorVRAMStrip34_Init:
	;Get VRAM strip data pointer
	sta $02
	tay
	lda ElevatorVRAMStripTable34,y
	asl
	tay
	lda EnemyVRAMStripPointerTable34,y
	sta ElevatorVRAMDataPointer
	sta $00
	lda EnemyVRAMStripPointerTable34+1,y
	sta ElevatorVRAMDataPointer+1
	sta $01
	;Get VRAM buffer address
	asl $02
	ldy $02
	lda ElevatorVRAMStripAddrTable34,y
	sta ElevatorVRAMPointer
	lda ElevatorVRAMStripAddrTable34+1,y
	sta ElevatorVRAMPointer+1
	;Mark inited
	inc ElevatorInitFlag
	jmp WriteEnemyVRAMStrip34_Init

WriteEnemyVRAMStrip34:
	;Save X register
	stx $05
	;Check if already inited
	ldy ElevatorInitFlag
	bne WriteEnemyVRAMStrip34_NoInit
	;Get VRAM strip data pointer
	asl
	tay
	lda EnemyVRAMStripPointerTable34+1,y
	sta $01
	lda EnemyVRAMStripPointerTable34,y
	sta $00
	;Get VRAM buffer address
	ldy #$01
	lda ($00),y
	sta ElevatorVRAMPointer+1
	dey
	lda ($00),y
	sta ElevatorVRAMPointer
	;Mark inited
	inc ElevatorInitFlag
	;Increment VRAM strip data pointer
	lda $00
	clc
	adc #$02
	sta ElevatorVRAMDataPointer
	sta $00
	lda $01
	adc #$00
	sta ElevatorVRAMDataPointer+1
	sta $01
	jmp WriteEnemyVRAMStrip34_Init
WriteEnemyVRAMStrip34_Exit:
	rts
WriteEnemyVRAMStrip34_NoInit:
	lda ElevatorVRAMDataPointer
	sta $00
	lda ElevatorVRAMDataPointer+1
	sta $01
WriteEnemyVRAMStrip34_Init:
	;If not enough space in VRAM buffer, exit early
	lda VRAMBufferOffset
	cmp #$18
	bcs WriteEnemyVRAMStrip34_Exit
	;Clear bytes written counter
	lda #$00
	sta $04
	;Init VRAM buffer row
	lda #$01
	jsr WriteVRAMBufferCmd
	lda ElevatorVRAMPointer
	;Set VRAM buffer address
	jsr WriteVRAMBufferCmd_AnyX
	lda ElevatorVRAMPointer+1
	jsr WriteVRAMBufferCmd_AnyX
	jmp WriteEnemyVRAMStrip34_InitNoC
WriteEnemyVRAMStrip34_Loop:
	;Init VRAM buffer row
	lda #$01
	jsr WriteVRAMBufferCmd
	;Set VRAM buffer address
	ldy #$00
	lda ($00),y
	jsr WriteVRAMBufferCmd_AnyX
	sta ElevatorVRAMPointer
	iny
	lda ($00),y
	jsr WriteVRAMBufferCmd_AnyX
	sta ElevatorVRAMPointer+1
	;Increment VRAM strip data pointer
	lda #$02
	clc
	adc $00
	sta $00
	bcc WriteEnemyVRAMStrip34_InitNoC
	inc $01
WriteEnemyVRAMStrip34_InitNoC:
	;Check for end all command
	ldy #$00
	lda ($00),y
	beq WriteEnemyVRAMStrip34_EndAll
	;Check for end strip command
	cmp #$80
	beq WriteEnemyVRAMStrip34_EndStrip
	;Check for RLE mode
	tay
	bpl WriteEnemyVRAMStrip34_RLE
	;Get strip length
	and #$7F
	sta $02
	;Write immediate VRAM strip
	ldy #$01
	;Check for RLE increment mode
	and #$40
	bne WriteEnemyVRAMStrip34_RLEInc
WriteEnemyVRAMStrip34_ImmLoop:
	;Set byte in VRAM
	lda ($00),y
	jsr WriteVRAMBufferCmd_AnyX
	;Loop for each byte
	inc $04
	cpy $02
	beq WriteEnemyVRAMStrip34_ImmEnd
	iny
	bne WriteEnemyVRAMStrip34_ImmLoop
WriteEnemyVRAMStrip34_ImmEnd:
	;Increment VRAM strip data pointer
	lda #$01
	clc
	adc $02
WriteEnemyVRAMStrip34_IncAddr:
	clc
	adc $00
	sta $00
	bcc WriteEnemyVRAMStrip34_NextNoC
	inc $01
WriteEnemyVRAMStrip34_NextNoC:
	lda $02
	clc
	adc ElevatorVRAMPointer
	sta ElevatorVRAMPointer
	lda ElevatorVRAMPointer+1
	adc #$00
	sta ElevatorVRAMPointer+1
	;Check if enough space in VRAM buffer to continue
	lda $04
	cmp #$28
	bcc WriteEnemyVRAMStrip34_NoOver
	;Save VRAM strip data pointer
	lda $00
	sta ElevatorVRAMDataPointer
	lda $01
	sta ElevatorVRAMDataPointer+1
	;End VRAM buffer
	jsr WriteVRAMBufferCmd_End
	;Restore X register
	ldx $05
	rts
WriteEnemyVRAMStrip34_NoOver:
	jmp WriteEnemyVRAMStrip34_InitNoC
WriteEnemyVRAMStrip34_RLE:
	;Write RLE VRAM strip
	ldy #$01
	sta $02
	lda ($00),y
	sta $06
	ldy $02
WriteEnemyVRAMStrip34_RLELoop:
	;Set byte in VRAM
	lda $06
	jsr WriteVRAMBufferCmd_AnyX
	;Loop for each byte
	inc $04
	dey
	bne WriteEnemyVRAMStrip34_RLELoop
WriteEnemyVRAMStrip34_RLEEnd:
	;Increment VRAM strip data pointer
	lda #$02
	bne WriteEnemyVRAMStrip34_IncAddr
WriteEnemyVRAMStrip34_EndStrip:
	;End VRAM buffer
	jsr WriteVRAMBufferCmd_End
	;Increment VRAM strip data pointer
	inc $00
	bne WriteEnemyVRAMStrip34_EndNoC
	inc $01
WriteEnemyVRAMStrip34_EndNoC:
	jmp WriteEnemyVRAMStrip34_Loop
WriteEnemyVRAMStrip34_EndAll:
	;Clear elevator inited flag
	lda #$00
	sta ElevatorInitFlag
	;End VRAM buffer
	jsr WriteVRAMBufferCmd_End
	;Restore X register
	ldx $05
	rts
WriteEnemyVRAMStrip34_RLEInc:
	;Write RLE increment VRAM strip
	lda ($00),y
	sta $03
	lda $02
	and #$3F
	sta $02
	tay
WriteEnemyVRAMStrip34_RLEIncLoop:
	;Set byte in VRAM
	lda $03
	jsr WriteVRAMBufferCmd_AnyX
	;Loop for each byte
	inc $03
	inc $04
	dey
	bne WriteEnemyVRAMStrip34_RLEIncLoop
	;Increment VRAM strip data pointer
	jmp WriteEnemyVRAMStrip34_RLEEnd

EnemyVRAMStripPointerTable34:
	.dw Level4ElevatorVRAMData0	;$00 \Level 4 elevator
	.dw Level4ElevatorVRAMData1	;$01 |
	.dw Level4ElevatorVRAMData2	;$02 /
	.dw Level3BossVRAMData0		;$03 \Level 3 boss
	.dw Level3BossVRAMData1		;$04 |
	.dw Level3BossVRAMData2		;$05 /
	.dw Level4ElevatorVRAMData3	;$06  Level 4 elevator
	.dw Level6ElevatorVRAMData0	;$07 \Level 6 elevator
	.dw Level6ElevatorVRAMData1	;$08 |
	.dw Level6ElevatorVRAMData2	;$09 /
	.dw Nametable0EData		;$0A  Level 3 boss
	.dw Level4BossVRAMData0		;$0B  Level 4 boss
	.dw TVFaceVRAMData		;$0C  TV face
	.dw Level4BossVRAMData1		;$0D  Level 4 boss
	.dw TVStaticVRAMData		;$0E  TV static
	.dw ClearDialogVRAMData34	;$0F  Clear dialog/HUD
	.dw Nametable12Data		;$10  TV top edge
	.dw TVFaceDeathVRAMData		;$11  TV face death
ElevatorVRAMStripAddrTable34:
	.dw $2080,$2300,$2940,$22C0,$2AC0,$22C0,$2AC0,$22C0,$22C0
ElevatorVRAMStripTable34:
	.db $07,$07,$07,$08,$08,$09,$09,$09,$07
ClearDialogVRAMData34:
	.dw $2B00
	.db $40,$00,$40,$00,$40,$00
	.db $80
	.dw $2BF0
	.db $10,$00
	.db $00

;;;;;;;;;;;;;;
;LEVEL 3 DATA;
;;;;;;;;;;;;;;
Level31BGPointerData:
	.dw Level31BGData+$0000
	.dw Level31BGData+$0040
	.dw Level31BGData+$0080
	.dw Level31BGData+$00C0
	.dw Level31BGData+$0100
	.dw Level31BGData+$0140
	.dw Level31BGData+$0180
	.dw Level31BGData+$01C0
	.dw Level31BGData+$0200
	.dw Level31BGData+$0240
	.dw Level31BGData+$03A0
	.dw Level31BGData+$0280
	.dw Level31BGData+$02B0
	.dw Level31BGData+$02E0
	.dw Level31BGData+$0310
	.dw Level31BGData+$0340
	.dw Level31BGData+$0370
Level31BGData:
	.db $20,$2A,$2C,$4F,$2B,$2C,$2D,$29
	.db $20,$2A,$4F,$2B,$2C,$7A,$2D,$29
	.db $20,$50,$51,$51,$51,$51,$52,$29
	.db $03,$04,$04,$04,$04,$04,$04,$08
	.db $03,$04,$04,$04,$04,$04,$04,$08
	.db $03,$04,$04,$04,$04,$04,$04,$08
	.db $03,$04,$04,$04,$04,$04,$04,$08
	.db $03,$04,$04,$04,$04,$04,$04,$08
	.db $07,$0E,$0E,$0E,$0E,$0E,$0E,$0F
	.db $07,$0C,$0C,$0C,$0C,$0C,$0C,$0D
	.db $0A,$11,$11,$11,$11,$11,$11,$12
	.db $0B,$3A,$3A,$3A,$3A,$3A,$3A,$3B
	.db $61,$3A,$3A,$3A,$3A,$3A,$3A,$3B
	.db $3C,$3D,$3E,$3F,$01,$02,$6A,$6B
	.db $00,$26,$27,$28,$32,$33,$34,$35
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $14,$2B,$2C,$4F,$2B,$2C,$19,$1A
	.db $14,$2C,$4F,$2B,$2C,$7A,$19,$1A
	.db $14,$4F,$2B,$2C,$7A,$15,$19,$1A
	.db $16,$7C,$7D,$7E,$17,$17,$19,$1B
	.db $18,$18,$18,$18,$18,$18,$19,$44
	.db $13,$13,$13,$13,$13,$13,$19,$44
	.db $49,$4A,$4B,$4C,$40,$41,$42,$43
	.db $00,$26,$27,$28,$32,$33,$34,$35
	.db $1D,$15,$15,$14,$37,$38,$37,$38
	.db $1D,$15,$7B,$14,$38,$37,$38,$37
	.db $1D,$7B,$2B,$14,$37,$38,$37,$38
	.db $1E,$7C,$7D,$16,$38,$37,$38,$37
	.db $1F,$18,$18,$18,$37,$38,$37,$38
	.db $4D,$13,$13,$13,$38,$37,$38,$37
	.db $4D,$13,$13,$13,$58,$57,$58,$57
	.db $49,$4A,$4B,$4C,$59,$5A,$5B,$5C
	.db $37,$38,$37,$39,$76,$2B,$2C,$75
	.db $38,$37,$38,$39,$76,$2C,$4F,$75
	.db $37,$38,$37,$39,$76,$4F,$2B,$75
	.db $38,$37,$38,$39,$76,$2B,$2C,$75
	.db $37,$38,$37,$39,$78,$51,$51,$77
	.db $38,$37,$38,$39,$55,$55,$55,$79
	.db $58,$57,$58,$39,$55,$55,$55,$79
	.db $5C,$5C,$5C,$39,$56,$56,$56,$56
	.db $2A,$2B,$2C,$2D,$39,$37,$38,$37
	.db $2A,$2C,$4F,$2D,$39,$38,$37,$38
	.db $2A,$4F,$2B,$2D,$39,$37,$38,$37
	.db $2A,$2B,$2C,$2D,$39,$38,$37,$38
	.db $50,$51,$51,$52,$39,$37,$38,$37
	.db $53,$54,$55,$55,$39,$38,$37,$38
	.db $6C,$6D,$55,$55,$39,$37,$38,$37
	.db $6E,$6F,$56,$56,$39,$38,$37,$38
	.db $37,$38,$37,$38,$14,$15,$15,$15
	.db $38,$37,$38,$37,$14,$15,$15,$7B
	.db $37,$38,$37,$38,$14,$15,$7B,$2B
	.db $38,$37,$38,$37,$14,$7B,$2B,$55
	.db $37,$38,$37,$38,$14,$2B,$55,$2C
	.db $38,$37,$38,$37,$14,$55,$2C,$7A
	.db $37,$38,$37,$38,$14,$2C,$7A,$15
	.db $37,$38,$37,$38,$14,$7A,$15,$15
	.db $7B,$2B,$19,$1A,$1D,$15,$15,$14
	.db $2B,$55,$19,$1A,$1D,$15,$15,$14
	.db $55,$2C,$19,$1A,$1D,$15,$15,$14
	.db $2C,$7A,$19,$1A,$1D,$15,$15,$14
	.db $7A,$15,$19,$1A,$1D,$15,$15,$14
	.db $15,$15,$19,$1A,$1D,$15,$15,$14
	.db $15,$15,$19,$1A,$1D,$15,$15,$14
	.db $15,$15,$19,$1A,$1D,$15,$15,$14
	.db $07,$0C,$0C,$0C,$0C,$0C,$0C,$0D
	.db $07,$0C,$0C,$0C,$0C,$0C,$0C,$0D
	.db $07,$0E,$0E,$0E,$0E,$0E,$0E,$0F
	.db $07,$0C,$0C,$0C,$0C,$0C,$0C,$0D
	.db $07,$0C,$0C,$0C,$0C,$0C,$0C,$0D
	.db $07,$0C,$0C,$0C,$0C,$0C,$0C,$0D
	.db $07,$0C,$0C,$0C,$0C,$0C,$0C,$0D
	.db $07,$0C,$0C,$0C,$0C,$0C,$0C,$0D
	.db $5F,$36,$36,$36,$36,$36,$36,$60
	.db $5F,$36,$36,$36,$36,$36,$36,$60
	.db $05,$36,$36,$36,$36,$36,$36,$09
	.db $36,$36,$36,$36,$36,$36,$36,$36
	.db $21,$22,$23,$24,$2E,$2F,$30,$31
	.db $00,$26,$27,$28,$32,$33,$34,$35
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$26,$27,$28
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $32,$33,$34,$35,$66,$67,$68,$69
	.db $00,$00,$00,$00,$00,$26,$27,$28
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $10,$25,$46,$47,$64,$64,$64,$64
	.db $32,$33,$34,$35,$21,$22,$23,$24
	.db $00,$00,$00,$00,$00,$26,$27,$28
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $70,$71,$64,$64,$39,$37,$38,$37
	.db $73,$74,$30,$31,$39,$65,$65,$65
	.db $32,$33,$34,$35,$66,$67,$68,$69
	.db $00,$00,$00,$00,$00,$26,$27,$28
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $38,$37,$38,$37,$16,$17,$17,$17
	.db $65,$65,$65,$65,$18,$18,$18,$18
	.db $10,$25,$46,$06,$13,$13,$13,$13
	.db $32,$33,$34,$35,$49,$4A,$4B,$4C
	.db $00,$00,$00,$00,$00,$26,$27,$28
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $17,$17,$19,$1B,$1E,$17,$17,$16
	.db $18,$18,$19,$44,$1F,$18,$18,$18
	.db $13,$13,$19,$44,$4D,$13,$13,$13
	.db $40,$41,$42,$43,$4D,$13,$13,$13
	.db $32,$33,$34,$35,$49,$4A,$4B,$4C
	.db $00,$00,$00,$00,$48,$62,$72,$63
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
Level32BGPointerData:
	.dw Level32BGData+$0210
	.dw Level32BGData+$0000
	.dw Level32BGData+$0040
	.dw Level32BGData+$0080
	.dw Level32BGData+$00C0
	.dw Level32BGData+$00F0
	.dw Level32BGData+$0120
	.dw Level32BGData+$0150
	.dw Level32BGData+$0180
	.dw Level32BGData+$01B0
	.dw Level32BGData+$01E0
Level32BGData:
	.db $01,$02,$0D,$0E,$0E,$0F,$02,$03
	.db $01,$02,$09,$0A,$0A,$0B,$02,$03
	.db $01,$02,$0D,$0E,$0E,$0F,$02,$03
	.db $01,$02,$09,$0A,$0A,$0B,$02,$03
	.db $01,$02,$0D,$0E,$0E,$0F,$02,$03
	.db $01,$02,$09,$0A,$0A,$0B,$02,$03
	.db $01,$02,$0D,$0E,$0E,$0F,$02,$03
	.db $04,$08,$08,$08,$08,$08,$08,$0C
	.db $10,$11,$14,$15,$16,$17,$10,$11
	.db $11,$10,$11,$10,$11,$10,$11,$10
	.db $10,$11,$14,$15,$16,$17,$10,$11
	.db $11,$10,$11,$10,$11,$10,$11,$10
	.db $10,$11,$14,$15,$16,$17,$10,$11
	.db $11,$10,$11,$10,$11,$10,$11,$10
	.db $10,$11,$14,$15,$16,$17,$10,$11
	.db $11,$10,$11,$10,$11,$10,$11,$10
	.db $21,$20,$18,$19,$1A,$1B,$21,$20
	.db $20,$21,$1C,$1D,$1E,$1F,$20,$21
	.db $21,$20,$18,$19,$1A,$1B,$21,$20
	.db $20,$21,$1C,$1D,$1E,$1F,$20,$21
	.db $21,$20,$18,$19,$1A,$1B,$21,$20
	.db $20,$21,$1C,$1D,$1E,$1F,$20,$21
	.db $21,$20,$18,$19,$1A,$1B,$21,$20
	.db $20,$21,$1C,$1D,$1E,$1F,$20,$21
	.db $11,$10,$11,$10,$11,$10,$11,$10
	.db $10,$11,$14,$15,$16,$17,$10,$11
	.db $11,$10,$11,$10,$11,$10,$11,$10
	.db $10,$11,$14,$15,$16,$17,$10,$11
	.db $11,$10,$11,$10,$11,$10,$11,$10
	.db $13,$13,$13,$13,$13,$13,$13,$13
	.db $11,$10,$11,$10,$24,$00,$00,$27
	.db $10,$11,$10,$11,$28,$29,$2A,$2B
	.db $11,$10,$11,$10,$11,$2D,$2E,$10
	.db $10,$11,$10,$11,$10,$11,$10,$11
	.db $11,$10,$11,$10,$11,$10,$11,$10
	.db $13,$13,$13,$13,$13,$13,$13,$13
	.db $11,$10,$24,$00,$00,$27,$11,$10
	.db $10,$11,$28,$29,$2A,$2B,$10,$11
	.db $11,$10,$11,$2D,$2E,$10,$11,$10
	.db $10,$11,$10,$11,$10,$11,$10,$11
	.db $11,$10,$11,$10,$11,$10,$11,$10
	.db $13,$13,$13,$13,$13,$13,$13,$13
	.db $24,$00,$00,$27,$11,$10,$11,$12
	.db $28,$29,$2A,$2B,$10,$11,$10,$11
	.db $11,$2D,$2E,$10,$11,$10,$11,$12
	.db $10,$11,$10,$11,$10,$11,$10,$11
	.db $11,$10,$11,$10,$11,$10,$11,$12
	.db $13,$13,$13,$13,$13,$13,$13,$13
	.db $22,$22,$22,$22,$22,$22,$22,$22
	.db $2C,$22,$22,$2F,$2C,$22,$22,$2F
	.db $30,$31,$32,$33,$30,$31,$32,$33
	.db $34,$35,$36,$37,$34,$35,$36,$37
	.db $23,$23,$23,$23,$23,$23,$23,$23
	.db $13,$13,$13,$13,$13,$13,$13,$13
	.db $22,$22,$22,$22,$22,$22,$22,$22
	.db $2C,$22,$22,$2F,$2C,$22,$22,$2F
	.db $30,$31,$32,$33,$30,$31,$32,$33
	.db $34,$35,$36,$37,$34,$35,$36,$37
	.db $23,$23,$23,$23,$23,$23,$23,$23
	.db $38,$38,$38,$38,$38,$38,$38,$38
	.db $22,$22,$22,$22,$22,$22,$22,$22
	.db $2C,$22,$22,$2F,$2C,$22,$22,$2F
	.db $30,$31,$32,$33,$30,$31,$32,$33
	.db $34,$35,$36,$37,$34,$35,$36,$37
	.db $23,$23,$23,$23,$23,$23,$23,$23
	.db $38,$38,$38,$38,$13,$13,$13,$13
	.db $01,$02,$02,$02,$02,$02,$02,$03
	.db $01,$02,$05,$06,$06,$07,$02,$03
	.db $01,$02,$02,$02,$02,$02,$02,$03
	.db $01,$02,$05,$06,$06,$07,$02,$03
	.db $01,$02,$02,$02,$02,$02,$02,$03
	.db $01,$02,$05,$06,$06,$07,$02,$03
	.db $01,$02,$02,$02,$02,$02,$02,$03
	.db $01,$02,$05,$06,$06,$07,$02,$03
Level33BGPointerData:
	.dw Level33BGData+$0000
Level33BGData:
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $13,$13,$13,$13,$13,$13,$13,$13
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
Level31TileData:
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $02,$02,$02,$02,$02,$02,$02,$02,$C0,$5B,$C2,$5D,$EA,$34,$EB,$36
	.db $02,$02,$02,$02,$02,$02,$02,$02,$C6,$5F,$CA,$57,$00,$39,$EC,$3A
	.db $03,$01,$F4,$F4,$03,$01,$3C,$3C,$03,$01,$03,$03,$03,$01,$03,$03
	.db $F4,$F4,$F4,$F4,$3C,$3C,$3C,$3C,$03,$03,$03,$03,$03,$03,$03,$03
	.db $03,$01,$03,$03,$03,$01,$03,$03,$F4,$F4,$F4,$F4,$3C,$3C,$3C,$3C
	.db $04,$04,$04,$04,$04,$04,$04,$04,$DE,$04,$E4,$04,$C8,$91,$CC,$93
	.db $03,$01,$0B,$0C,$03,$01,$0B,$0C,$03,$01,$0B,$0C,$03,$01,$0B,$0C
	.db $F4,$F4,$09,$0A,$02,$02,$09,$0A,$02,$02,$09,$0A,$02,$02,$09,$0A
	.db $02,$02,$09,$0A,$02,$02,$09,$0A,$F4,$F4,$F4,$F4,$3C,$3C,$3C,$3C
	.db $03,$01,$0B,$0C,$03,$01,$0B,$0C,$F4,$0F,$10,$10,$3C,$6F,$02,$02
	.db $03,$12,$02,$02,$03,$12,$02,$02,$F4,$0F,$02,$02,$3C,$6F,$02,$02
	.db $00,$00,$00,$13,$00,$00,$00,$13,$00,$00,$00,$13,$00,$00,$00,$13
	.db $00,$00,$0B,$0C,$00,$00,$0B,$0C,$00,$00,$0B,$0C,$00,$00,$0B,$0C
	.db $00,$00,$00,$13,$00,$00,$00,$13,$00,$00,$00,$13,$14,$14,$14,$13
	.db $00,$00,$0B,$0C,$00,$00,$0B,$0C,$00,$00,$0B,$0C,$14,$14,$0B,$0C
	.db $04,$04,$04,$04,$04,$04,$04,$04,$C0,$8D,$C4,$8F,$EA,$34,$EB,$36
	.db $00,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$02,$02,$02,$02
	.db $00,$00,$0B,$0C,$00,$00,$0B,$0C,$10,$10,$10,$15,$02,$02,$02,$11
	.db $62,$17,$17,$18,$1C,$1D,$1D,$1E,$17,$18,$62,$17,$1D,$1E,$1C,$1D
	.db $19,$04,$04,$1B,$19,$04,$04,$1B,$19,$04,$04,$1B,$19,$04,$04,$1B
	.db $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
	.db $19,$04,$04,$1B,$19,$04,$04,$1B,$19,$04,$04,$1B,$1F,$1F,$1F,$1F
	.db $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$1F,$1F,$1F,$1F
	.db $62,$18,$62,$18,$1C,$1E,$1C,$1E,$17,$18,$62,$17,$1D,$1E,$1C,$1D
	.db $20,$21,$22,$02,$20,$21,$22,$02,$20,$21,$22,$02,$20,$21,$22,$02
	.db $23,$24,$02,$02,$23,$24,$02,$02,$23,$24,$02,$02,$23,$24,$02,$02
	.db $23,$24,$02,$02,$23,$24,$02,$02,$23,$24,$02,$02,$23,$24,$25,$25
	.db $23,$24,$26,$27,$23,$24,$28,$29,$23,$24,$26,$2A,$23,$24,$28,$2B
	.db $02,$02,$03,$03,$02,$02,$03,$03,$02,$02,$03,$03,$02,$02,$03,$03
	.db $02,$02,$03,$03,$02,$02,$03,$03,$02,$02,$03,$03,$25,$25,$1F,$1F
	.db $26,$27,$62,$18,$28,$29,$1C,$1E,$2A,$27,$62,$17,$2B,$29,$1C,$1D
	.db $03,$01,$00,$00,$03,$01,$00,$00,$03,$01,$00,$00,$03,$01,$00,$00
	.db $C0,$2D,$C1,$2F,$EA,$34,$EB,$36,$E6,$3B,$E7,$3D,$43,$44,$45,$46
	.db $C5,$31,$C9,$33,$00,$39,$EC,$3A,$E8,$3F,$E9,$41,$47,$48,$49,$4A
	.db $D1,$03,$D6,$03,$C0,$2D,$C1,$2F,$EA,$34,$EB,$36,$E6,$3B,$E7,$3D
	.db $DB,$03,$E1,$03,$C5,$31,$C9,$33,$ED,$39,$EC,$3A,$E8,$3F,$E9,$41
	.db $04,$04,$04,$04,$04,$04,$04,$04,$C8,$91,$CC,$93,$00,$39,$EC,$3A
	.db $4B,$4C,$4D,$4E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $43,$44,$45,$46,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $47,$48,$49,$4A,$4B,$4C,$4D,$4E,$00,$00,$00,$00,$00,$00,$00,$00
	.db $4F,$03,$09,$0A,$4F,$03,$09,$0A,$4F,$03,$09,$0A,$4F,$03,$09,$0A
	.db $4F,$03,$03,$12,$4F,$03,$03,$12,$4F,$03,$03,$12,$4F,$03,$03,$12
	.db $03,$03,$50,$51,$03,$50,$51,$04,$50,$51,$04,$04,$51,$04,$04,$04
	.db $04,$04,$04,$52,$04,$04,$52,$54,$04,$52,$54,$03,$52,$54,$03,$03
	.db $53,$03,$03,$03,$53,$03,$03,$03,$53,$03,$03,$03,$53,$03,$03,$03
	.db $03,$03,$03,$03,$03,$03,$03,$03,$C0,$2D,$C1,$2F,$EA,$34,$EB,$36
	.db $03,$03,$03,$03,$03,$03,$03,$03,$C5,$31,$C9,$33,$00,$39,$EC,$3A
	.db $03,$03,$03,$03,$03,$03,$03,$03,$D1,$03,$D6,$03,$C0,$2D,$C1,$2F
	.db $03,$03,$03,$03,$03,$03,$03,$03,$DB,$03,$E1,$03,$C5,$31,$C9,$33
	.db $E6,$3B,$E7,$3D,$43,$44,$45,$46,$00,$00,$00,$00,$00,$00,$00,$00
	.db $E8,$3F,$E9,$41,$47,$48,$49,$4A,$4B,$4C,$4D,$4E,$00,$00,$00,$00
	.db $EA,$34,$EB,$36,$E6,$3B,$E7,$3D,$43,$44,$45,$46,$00,$00,$00,$00
	.db $ED,$39,$EC,$3A,$E8,$3F,$E9,$41,$47,$48,$49,$4A,$4B,$4C,$4D,$4E
	.db $03,$03,$03,$03,$03,$03,$03,$03,$F4,$F4,$F4,$F4,$3C,$3C,$3C,$3C
	.db $58,$59,$03,$59,$03,$59,$59,$58,$58,$59,$03,$59,$59,$03,$59,$58
	.db $58,$59,$58,$59,$59,$03,$03,$59,$03,$59,$03,$59,$59,$03,$59,$03
	.db $5A,$04,$04,$0C,$5A,$04,$04,$0C,$5A,$04,$04,$0C,$5A,$04,$04,$0C
	.db $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
	.db $02,$02,$02,$11,$02,$02,$02,$11,$02,$02,$02,$11,$02,$02,$02,$11
	.db $C0,$5B,$C2,$5D,$EA,$34,$EB,$36,$E6,$3B,$E7,$3D,$43,$44,$45,$46
	.db $C6,$5F,$CA,$57,$00,$39,$EC,$3A,$E8,$3F,$E9,$41,$47,$48,$49,$4A
	.db $D2,$D2,$D7,$D7,$C0,$5B,$C2,$5D,$EA,$34,$EB,$36,$E6,$3B,$E7,$3D
	.db $DC,$DC,$E2,$E2,$C6,$5F,$CA,$57,$ED,$39,$EC,$3A,$E8,$3F,$E9,$41
	.db $62,$17,$17,$18,$1C,$1D,$1D,$1E,$C0,$61,$C3,$63,$EA,$34,$EB,$36
	.db $62,$17,$F5,$F6,$1C,$1D,$71,$58,$C7,$65,$D0,$74,$00,$39,$EC,$3A
	.db $F6,$F6,$F6,$F6,$58,$58,$58,$58,$D5,$D5,$DA,$D5,$C0,$5B,$C2,$5D
	.db $F6,$F6,$F6,$70,$58,$58,$58,$72,$E0,$D5,$E5,$15,$C6,$5F,$CA,$60
	.db $23,$24,$2A,$27,$23,$24,$2B,$29,$23,$24,$26,$2A,$23,$24,$28,$2B
	.db $62,$17,$17,$18,$1C,$1D,$1D,$1E,$62,$17,$17,$18,$1C,$1D,$1D,$1E
	.db $04,$04,$04,$04,$04,$04,$04,$04,$D4,$04,$D9,$04,$C0,$8D,$C4,$8F
	.db $5A,$04,$04,$0C,$5A,$04,$04,$0C,$DF,$04,$E4,$0C,$94,$91,$CC,$95
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$B2,$B3,$B4,$00,$BB,$BC,$BD
	.db $C0,$61,$C3,$63,$EA,$34,$EB,$36,$E6,$3B,$E7,$3D,$43,$44,$45,$46
	.db $C7,$65,$CB,$67,$00,$39,$EC,$3A,$E8,$3F,$E9,$41,$47,$48,$49,$4A
	.db $D3,$17,$D8,$18,$C0,$2D,$68,$69,$EA,$34,$EB,$36,$E6,$3B,$E7,$3D
	.db $DD,$17,$E3,$18,$6A,$6B,$6C,$6D,$ED,$39,$EC,$3A,$E8,$3F,$E9,$41
	.db $26,$2A,$17,$18,$28,$2B,$1D,$1E,$2A,$27,$62,$17,$2B,$29,$1C,$1D
	.db $26,$2A,$17,$18,$28,$2B,$1D,$1E,$C0,$61,$C3,$63,$EA,$34,$EB,$36
	.db $54,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$50
	.db $4F,$03,$03,$75,$4F,$03,$03,$03,$4F,$03,$03,$03,$77,$33,$33,$33
	.db $64,$64,$64,$64,$03,$03,$03,$03,$03,$03,$03,$03,$33,$33,$33,$33
	.db $76,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$33,$33,$33,$33
	.db $78,$04,$79,$7A,$78,$7D,$7E,$03,$81,$82,$83,$84,$87,$88,$88,$88
	.db $7B,$7C,$04,$04,$03,$7F,$80,$04,$03,$03,$85,$86,$88,$88,$88,$89
	.db $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
	.db $06,$06,$06,$06,$3C,$3C,$3C,$3C,$03,$03,$03,$03,$03,$03,$03,$03
	.db $58,$59,$58,$59,$59,$03,$03,$59,$8A,$8A,$8A,$8A,$8B,$8B,$8B,$8B
	.db $58,$59,$03,$59,$03,$59,$59,$58,$8A,$8A,$8A,$8A,$8B,$8B,$8B,$8B
	.db $8C,$8C,$8C,$8C,$04,$04,$04,$04,$C0,$8D,$C4,$8F,$EA,$34,$EB,$36
	.db $8C,$8C,$8C,$8C,$04,$04,$04,$04,$C8,$91,$CC,$93,$00,$39,$EC,$3A
	.db $8C,$8C,$8C,$8C,$04,$04,$04,$04,$D4,$04,$D9,$04,$C0,$8D,$C4,$8F
	.db $8C,$8C,$8C,$8C,$04,$04,$04,$04,$DE,$04,$E4,$04,$C8,$91,$CC,$93
	.db $EA,$34,$EB,$36,$E6,$3B,$E7,$3D,$43,$44,$45,$46,$00,$00,$00,$00
	.db $ED,$39,$EC,$3A,$E8,$3F,$E9,$41,$47,$48,$49,$4A,$4B,$4C,$4D,$4E
	.db $03,$01,$03,$03,$03,$01,$03,$03,$03,$01,$F4,$F4,$03,$01,$3C,$3C
	.db $02,$02,$09,$0A,$02,$02,$09,$0A,$F4,$F4,$09,$0A,$02,$02,$09,$0A
	.db $03,$12,$02,$02,$03,$12,$02,$02,$03,$12,$02,$02,$03,$12,$02,$02
	.db $EE,$4C,$EF,$4E,$00,$00,$00,$00,$B5,$B6,$B7,$B8,$BE,$BF,$90,$73
	.db $F0,$48,$F1,$4A,$4B,$4C,$4D,$4E,$00,$00,$00,$00,$B5,$B6,$B7,$B8
	.db $03,$03,$03,$03,$03,$03,$03,$03,$06,$06,$06,$06,$3C,$3C,$3C,$3C
	.db $8A,$8A,$8A,$8A,$8B,$8B,$8B,$8B,$8C,$8C,$8C,$8C,$04,$04,$04,$04
	.db $C0,$8D,$C4,$8F,$EA,$34,$EB,$36,$E6,$3B,$E7,$3D,$43,$44,$45,$46
	.db $C8,$91,$CC,$93,$00,$39,$EC,$3A,$E8,$3F,$E9,$41,$47,$48,$49,$4A
	.db $D4,$04,$D9,$04,$C0,$8D,$C4,$8F,$EA,$34,$EB,$36,$E6,$3B,$E7,$3D
	.db $DE,$04,$E4,$04,$C8,$91,$CC,$93,$ED,$39,$EC,$3A,$E8,$3F,$E9,$41
	.db $02,$02,$02,$02,$02,$02,$02,$02,$D2,$02,$D7,$02,$C0,$5B,$C2,$5D
	.db $02,$02,$02,$11,$02,$02,$02,$11,$DC,$02,$E2,$11,$C6,$5F,$CA,$60
	.db $96,$97,$98,$99,$96,$03,$9D,$9E,$96,$03,$A1,$A2,$96,$03,$A5,$A6
	.db $9A,$9B,$02,$9C,$9F,$A0,$02,$9C,$A3,$A4,$02,$9C,$A7,$A8,$02,$9C
	.db $96,$03,$03,$03,$96,$03,$03,$03,$96,$03,$03,$03,$96,$03,$03,$03
	.db $03,$A9,$02,$9C,$03,$A9,$02,$9C,$03,$A9,$02,$9C,$03,$A9,$02,$9C
	.db $96,$03,$03,$03,$AA,$AB,$AC,$AB,$96,$03,$03,$03,$96,$03,$03,$03
	.db $03,$A9,$02,$9C,$AB,$AD,$AE,$AF,$03,$A9,$02,$9C,$03,$A9,$02,$9C
	.db $43,$44,$45,$46,$00,$00,$00,$00,$B9,$BA,$00,$00,$8E,$5E,$B3,$B4
	.db $96,$03,$03,$03,$AA,$AB,$AC,$AB,$C0,$2D,$C1,$2F,$EA,$34,$EB,$36
	.db $03,$A9,$02,$9C,$AB,$AD,$AE,$AF,$C5,$B0,$CA,$B1,$00,$39,$EC,$3A
	.db $53,$03,$03,$4F,$53,$03,$03,$4F,$53,$03,$03,$4F,$53,$03,$03,$4F
	.db $03,$03,$03,$12,$03,$56,$03,$12,$03,$03,$03,$12,$03,$03,$56,$12
	.db $76,$03,$03,$4F,$03,$56,$03,$4F,$56,$03,$56,$4F,$33,$33,$33,$77
	.db $03,$03,$03,$75,$03,$03,$03,$03,$03,$03,$03,$03,$33,$33,$33,$33
	.db $04,$04,$04,$78,$04,$04,$04,$78,$04,$04,$04,$78,$04,$04,$04,$78
	.db $54,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
	.db $03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$50
	.db $03,$03,$50,$51,$03,$50,$51,$04,$50,$51,$04,$04,$1F,$1F,$1F,$1F
	.db $04,$04,$04,$52,$04,$04,$52,$54,$04,$52,$54,$03,$1F,$1F,$1F,$1F
	.db $54,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$1F,$1F,$1F,$1F
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04
	.db $00,$B2,$B3,$B4,$00,$BB,$BC,$BD,$5C,$30,$40,$32,$16,$2E,$40,$32
	.db $B5,$B6,$B7,$B8,$BE,$BF,$90,$73,$BD,$BE,$BF,$90,$BD,$BE,$BF,$90
	.db $B9,$BA,$00,$00,$8E,$5E,$B3,$B4,$42,$BB,$BC,$BD,$3E,$30,$40,$32
	.db $00,$00,$00,$00,$B5,$B6,$B7,$B8,$BE,$BF,$90,$73,$BD,$BE,$BF,$90
	.db $35,$32,$37,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $B4,$B5,$B6,$B7,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $05,$05,$05,$05,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
	.db $05,$05,$09,$0A,$03,$03,$09,$0A,$03,$03,$09,$0A,$03,$03,$09,$0A
	.db $17,$18,$D3,$18,$1D,$1E,$1C,$1E,$17,$18,$D3,$17,$1D,$1E,$1C,$1D
	.db $16,$2E,$40,$32,$35,$32,$37,$38,$00,$00,$00,$00,$00,$00,$00,$00
	.db $BD,$BE,$BF,$90,$B4,$B5,$B6,$B7,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $D3,$17,$17,$18,$1C,$1D,$1D,$1E,$D3,$17,$F5,$F6,$1C,$1D,$71,$58
	.db $20,$21,$22,$02,$20,$21,$22,$02,$F6,$F6,$F6,$F6,$58,$58,$58,$58
	.db $23,$24,$2A,$27,$23,$24,$2B,$29,$F6,$F6,$F6,$70,$58,$58,$58,$72
	.db $00,$00,$00,$00,$00,$00,$00,$00,$58,$59,$58,$59,$59,$03,$03,$59
	.db $4B,$4C,$4D,$4E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $43,$44,$45,$46,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $47,$48,$49,$4A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
Level31AttrData:
	.db $FF,$55,$55,$55,$55,$55,$AF,$55,$55,$55,$55,$55,$55,$55,$55,$55
	.db $AF,$55,$55,$FF,$55,$55,$55,$55,$FF,$55,$55,$55,$DD,$55,$55,$FF
	.db $55,$55,$55,$55,$55,$AF,$55,$55,$55,$66,$AA,$55,$55,$AA,$55,$55
	.db $55,$55,$55,$55,$55,$55,$55,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55
	.db $FF,$77,$55,$55,$DD,$FF,$AF,$AA,$FF,$5F,$5F,$5F,$5F,$FF,$FF,$55
	.db $AA,$AA,$AA,$FF,$FF,$FF,$55,$AA,$AA,$AA,$AA,$AA,$AA,$5A,$59,$55
	.db $55,$55,$F5,$F5,$55,$AA,$5A,$5A,$5A,$5A,$55,$55,$FF,$FF,$FF,$FF
	.db $FF,$FF,$F5,$FF,$FF,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$FF
	.db $55,$FF,$FF,$FF,$FF,$FF,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$AA,$66,$FF,$FF,$FF,$00,$7F,$55,$5D,$A0,$05,$05,$05
Level32TileData:
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $2E,$2E,$2F,$30,$2E,$2E,$2F,$30,$2E,$2E,$2F,$30,$2E,$2E,$2F,$30
	.db $31,$31,$31,$31,$31,$31,$31,$31,$31,$31,$31,$31,$31,$31,$31,$31
	.db $32,$33,$2E,$2E,$32,$33,$2E,$2E,$32,$33,$2E,$2E,$32,$33,$2E,$2E
	.db $2E,$2E,$2F,$30,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $B1,$14,$15,$B4,$17,$18,$19,$19,$1A,$1B,$1C,$1C,$B5,$1E,$1F,$20
	.db $31,$31,$31,$31,$19,$19,$19,$19,$1C,$1C,$1C,$1C,$00,$00,$00,$00
	.db $B1,$14,$15,$B4,$19,$19,$2A,$2B,$1C,$1C,$2C,$2D,$1D,$1E,$1F,$B8
	.db $31,$31,$31,$31,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $31,$31,$31,$31,$31,$31,$31,$31,$B1,$14,$15,$B4,$17,$18,$19,$19
	.db $31,$31,$31,$31,$31,$31,$31,$31,$31,$31,$31,$31,$19,$19,$19,$19
	.db $31,$31,$31,$31,$31,$31,$31,$31,$B1,$14,$15,$B4,$19,$19,$2A,$2B
	.db $32,$33,$2E,$2E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $1A,$1B,$1C,$1C,$B5,$1E,$1F,$20,$31,$31,$31,$31,$31,$31,$31,$31
	.db $1C,$1C,$1C,$1C,$00,$00,$00,$00,$31,$31,$31,$31,$31,$31,$31,$31
	.db $1C,$1C,$2C,$2D,$1D,$1E,$1F,$B8,$31,$31,$31,$31,$31,$31,$31,$31
	.db $21,$01,$02,$03,$05,$06,$07,$08,$0A,$0B,$0C,$0B,$0E,$0F,$10,$11
	.db $01,$02,$03,$04,$06,$07,$08,$09,$0B,$0C,$0B,$0D,$0F,$10,$11,$12
	.db $21,$01,$03,$04,$05,$06,$08,$09,$0A,$0B,$0B,$0D,$0E,$0F,$11,$12
	.db $BE,$BF,$BE,$BF,$36,$37,$36,$37,$31,$31,$31,$31,$31,$31,$31,$31
	.db $13,$14,$15,$16,$17,$18,$19,$19,$1A,$1B,$1C,$1C,$1D,$1E,$1F,$20
	.db $21,$01,$02,$03,$19,$19,$19,$19,$1C,$1C,$1C,$1C,$00,$00,$00,$00
	.db $01,$02,$03,$04,$19,$19,$19,$19,$1C,$1C,$1C,$1C,$00,$00,$00,$00
	.db $13,$14,$15,$16,$19,$19,$2A,$2B,$1C,$1C,$2C,$2D,$1D,$1E,$1F,$20
	.db $0B,$0C,$0B,$0D,$0F,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$19
	.db $0A,$0B,$0C,$0B,$0E,$0F,$10,$11,$21,$01,$02,$03,$19,$19,$19,$19
	.db $0B,$0C,$0B,$0D,$0F,$10,$11,$12,$01,$02,$03,$04,$19,$19,$19,$19
	.db $0A,$0B,$0C,$0B,$0E,$0F,$10,$11,$13,$14,$15,$16,$19,$19,$2A,$2B
	.db $1A,$1B,$1C,$1C,$1D,$1E,$1F,$20,$01,$02,$03,$04,$06,$07,$08,$09
	.db $1C,$1C,$1C,$1C,$00,$00,$00,$00,$21,$01,$02,$03,$05,$06,$07,$08
	.db $1C,$1C,$1C,$1C,$00,$00,$00,$00,$01,$02,$03,$04,$06,$07,$08,$09
	.db $1C,$1C,$2C,$2D,$1D,$1E,$1F,$20,$21,$01,$02,$03,$05,$06,$07,$08
	.db $0A,$0B,$0C,$0B,$0E,$0F,$10,$11,$01,$02,$03,$04,$06,$07,$08,$09
	.db $0B,$0C,$0B,$0D,$0F,$10,$11,$12,$21,$01,$02,$03,$05,$06,$07,$08
	.db $22,$23,$24,$25,$26,$27,$28,$29,$24,$25,$22,$23,$28,$29,$26,$27
	.db $A1,$A2,$A1,$A2,$00,$00,$00,$00,$A3,$A4,$A5,$A6,$A7,$A8,$A9,$AA
	.db $38,$39,$00,$00,$3C,$3D,$3E,$00,$42,$43,$44,$00,$47,$48,$49,$4A
	.db $22,$23,$24,$25,$7E,$7E,$7E,$7E,$7E,$7E,$7E,$7E,$28,$29,$26,$27
	.db $22,$23,$24,$25,$7F,$7E,$7E,$7E,$7F,$7E,$7E,$7E,$28,$29,$26,$27
	.db $00,$00,$3A,$3B,$00,$3F,$40,$41,$00,$45,$43,$46,$4B,$4C,$4D,$4E
	.db $4F,$50,$51,$52,$05,$59,$5A,$51,$0A,$0B,$63,$64,$0E,$0F,$11,$6D
	.db $53,$00,$00,$00,$5B,$5C,$5D,$00,$65,$66,$67,$68,$6E,$6F,$70,$71
	.db $00,$00,$00,$54,$00,$5E,$5F,$60,$69,$6A,$66,$6B,$72,$73,$74,$75
	.db $55,$56,$57,$58,$56,$61,$62,$09,$6C,$00,$0B,$0D,$76,$0F,$11,$12
	.db $80,$81,$82,$25,$00,$86,$87,$88,$00,$00,$8C,$8D,$00,$00,$00,$90
	.db $21,$78,$79,$7A,$05,$07,$08,$08,$0A,$0B,$0C,$0B,$0E,$0F,$10,$11
	.db $7B,$7C,$7D,$04,$06,$06,$07,$09,$0B,$0C,$0B,$0D,$0F,$10,$11,$12
	.db $22,$83,$84,$85,$89,$8A,$8B,$00,$8E,$8F,$00,$00,$91,$00,$00,$00
	.db $92,$92,$92,$92,$00,$00,$00,$00,$00,$94,$95,$96,$9A,$9B,$9C,$27
	.db $92,$92,$92,$92,$00,$00,$00,$00,$24,$25,$22,$23,$28,$29,$26,$27
	.db $92,$92,$92,$92,$93,$00,$00,$00,$93,$00,$22,$23,$93,$00,$26,$27
	.db $92,$92,$92,$92,$00,$00,$00,$00,$97,$98,$99,$00,$28,$9D,$9E,$9F
	.db $00,$A0,$24,$25,$26,$27,$28,$29,$7E,$7E,$7E,$7E,$28,$29,$26,$27
	.db $22,$23,$24,$25,$26,$27,$28,$29,$7E,$7E,$7E,$7E,$28,$29,$26,$27
	.db $93,$00,$24,$25,$93,$00,$28,$29,$93,$00,$7E,$7E,$93,$00,$26,$27
	.db $22,$23,$00,$00,$26,$27,$28,$29,$7F,$7E,$7E,$7E,$28,$29,$26,$27
	.db $AB,$AC,$AB,$00,$00,$00,$00,$00,$AD,$AE,$AF,$B0,$00,$00,$00,$00
Level32AttrData:
	.db $00,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55,$55
	.db $AA,$AA,$AA,$55,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
	.db $AA,$AA,$AA,$F5,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
	.db $AF,$AF,$BF,$AF,$AA,$AA,$BB,$AA,$FF

;;;;;;;;;;;;;;
;LEVEL 6 DATA;
;;;;;;;;;;;;;;
Level61BGPointerData:
	.dw Level61BGData+$03F0
	.dw Level61BGData+$0000
	.dw Level61BGData+$0030
	.dw Level61BGData+$0060
	.dw Level61BGData+$0090
	.dw Level61BGData+$00C0
	.dw Level61BGData+$00F0
	.dw Level61BGData+$0130
	.dw Level61BGData+$0170
	.dw Level61BGData+$01A0
	.dw Level61BGData+$01D0
	.dw Level61BGData+$0200
	.dw Level61BGData+$0230
	.dw Level61BGData+$0260
	.dw Level61BGData+$02A0
	.dw Level61BGData+$02D0
	.dw Level61BGData+$0300
	.dw Level61BGData+$0340
	.dw Level61BGData+$0380
	.dw Level61BGData+$03C0
Level61BGData:
	.db $51,$54,$30,$30,$30,$30,$54,$50
	.db $54,$51,$30,$30,$30,$30,$30,$6C
	.db $50,$54,$30,$30,$30,$30,$30,$67
	.db $4E,$4F,$30,$30,$30,$30,$30,$30
	.db $50,$4D,$30,$30,$30,$30,$30,$30
	.db $4E,$4F,$56,$57,$58,$56,$57,$58
	.db $4D,$4E,$4F,$50,$4D,$4E,$4F,$50
	.db $6B,$15,$6C,$6B,$6C,$6B,$6C,$6B
	.db $30,$68,$67,$30,$67,$71,$67,$66
	.db $30,$30,$30,$66,$65,$72,$73,$75
	.db $30,$30,$30,$75,$60,$61,$76,$4E
	.db $56,$57,$61,$76,$1D,$7A,$A3,$4F
	.db $4D,$4E,$4F,$50,$4D,$4E,$4F,$50
	.db $30,$59,$5A,$5A,$59,$30,$59,$30
	.db $71,$30,$66,$71,$30,$66,$71,$30
	.db $72,$73,$75,$72,$73,$75,$72,$73
	.db $4F,$4D,$4E,$4F,$50,$4D,$4E,$4F
	.db $4E,$4F,$50,$4D,$4E,$4F,$50,$4D
	.db $4D,$4E,$4F,$50,$4D,$4E,$4F,$50
	.db $59,$30,$5A,$30,$59,$30,$59,$30
	.db $66,$71,$30,$66,$71,$30,$66,$71
	.db $75,$72,$73,$75,$72,$73,$75,$72
	.db $50,$4D,$4E,$4F,$50,$4E,$4F,$70
	.db $4E,$4F,$50,$4D,$4E,$4F,$50,$A4
	.db $4D,$4E,$4F,$50,$4D,$4E,$4F,$50
	.db $14,$6C,$6B,$15,$6C,$6B,$15,$6C
	.db $30,$67,$30,$68,$67,$30,$68,$67
	.db $74,$0F,$30,$71,$30,$66,$71,$30
	.db $63,$64,$10,$72,$73,$75,$72,$73
	.db $7A,$1D,$4F,$50,$4E,$4F,$50,$4D
	.db $4D,$4E,$4F,$50,$4D,$4E,$4F,$50
	.db $6B,$15,$6C,$6B,$15,$6C,$6B,$30
	.db $30,$68,$67,$30,$68,$67,$30,$30
	.db $66,$71,$30,$66,$71,$30,$66,$30
	.db $75,$72,$73,$75,$72,$73,$75,$30
	.db $4E,$4F,$50,$4D,$4E,$4F,$50,$4D
	.db $4D,$4E,$4F,$50,$4D,$4E,$4F,$50
	.db $50,$4D,$50,$4D,$50,$4D,$50,$4D
	.db $79,$7A,$79,$7A,$79,$7A,$79,$7A
	.db $5B,$5B,$5B,$5B,$5B,$5B,$5B,$5B
	.db $30,$30,$30,$30,$30,$30,$30,$30
	.db $30,$30,$30,$30,$30,$30,$30,$30
	.db $30,$30,$30,$30,$30,$30,$30,$30
	.db $4E,$4F,$50,$4D,$4E,$4F,$50,$4D
	.db $4D,$4E,$4F,$50,$4D,$4E,$4F,$50
	.db $50,$4D,$50,$4D,$50,$4D,$50,$4D
	.db $4E,$4F,$50,$4E,$4F,$4E,$4F,$50
	.db $14,$5C,$5D,$50,$55,$5E,$14,$15
	.db $30,$69,$6E,$15,$14,$30,$71,$68
	.db $30,$30,$71,$68,$66,$65,$72,$73
	.db $30,$30,$72,$73,$75,$60,$61,$76
	.db $4E,$4F,$50,$4E,$4F,$1D,$7A,$A3
	.db $4D,$4E,$4F,$50,$4D,$4E,$4F,$50
	.db $14,$14,$5C,$5D,$4E,$4F,$50,$4D
	.db $66,$71,$69,$6E,$5A,$5A,$59,$14
	.db $75,$72,$74,$0F,$30,$71,$30,$66
	.db $50,$70,$63,$64,$10,$72,$74,$75
	.db $4F,$A4,$7A,$1D,$4F,$50,$4E,$4F
	.db $4D,$4E,$4F,$4D,$50,$4E,$4F,$4D
	.db $50,$4D,$4E,$4F,$55,$5E,$6C,$6B
	.db $30,$5A,$59,$59,$30,$30,$67,$30
	.db $65,$30,$30,$30,$0F,$30,$71,$30
	.db $60,$77,$56,$78,$64,$10,$72,$73
	.db $1D,$A5,$53,$A2,$1D,$4F,$4E,$4F
	.db $4E,$4F,$5E,$24,$25,$08,$08,$02
	.db $15,$30,$30,$3A,$3B,$30,$30,$3A
	.db $68,$30,$30,$3D,$3E,$30,$30,$3D
	.db $66,$30,$30,$40,$41,$30,$30,$40
	.db $75,$30,$30,$31,$32,$30,$30,$31
	.db $70,$63,$58,$34,$35,$4A,$4A,$18
	.db $25,$23,$0E,$0B,$01,$0E,$0E,$0B
	.db $3B,$3F,$19,$04,$03,$19,$26,$04
	.db $3E,$3F,$17,$06,$09,$17,$17,$06
	.db $41,$3F,$17,$0C,$0D,$1F,$17,$0C
	.db $32,$3F,$47,$42,$43,$47,$47,$42
	.db $35,$36,$4C,$44,$45,$4C,$4C,$44
	.db $01,$0E,$0E,$0E,$0E,$0E,$0E,$0B
	.db $03,$26,$19,$26,$26,$19,$26,$04
	.db $09,$17,$1F,$17,$17,$17,$1F,$06
	.db $0D,$17,$17,$17,$1F,$17,$17,$0C
	.db $80,$17,$16,$17,$17,$17,$17,$7F
	.db $6A,$7B,$7B,$7B,$7B,$7B,$7B,$2D
	.db $39,$17,$17,$17,$17,$17,$17,$05
	.db $09,$1F,$17,$17,$17,$16,$1F,$06
	.db $39,$17,$17,$1F,$17,$16,$17,$05
	.db $09,$16,$17,$17,$1F,$17,$17,$06
	.db $33,$1F,$17,$17,$17,$17,$17,$28
	.db $0D,$17,$16,$17,$16,$17,$1F,$0C
	.db $43,$47,$47,$47,$47,$47,$47,$42
	.db $45,$4C,$4C,$4C,$4C,$4C,$4C,$44
	.db $20,$27,$27,$2C,$20,$27,$27,$2C
	.db $09,$17,$17,$06,$09,$16,$17,$06
	.db $33,$1F,$17,$28,$33,$17,$17,$28
	.db $0D,$17,$16,$0C,$0D,$1F,$17,$0C
	.db $43,$47,$47,$42,$43,$47,$47,$42
	.db $45,$4C,$4C,$44,$45,$4C,$4C,$44
	.db $54,$51,$30,$30,$30,$30,$53,$52
	.db $51,$54,$30,$30,$30,$30,$54,$53
	.db $54,$50,$30,$30,$30,$30,$50,$54
	.db $4E,$4F,$30,$30,$30,$30,$4D,$50
	.db $4D,$50,$30,$30,$30,$30,$4E,$4F
	.db $4E,$4F,$30,$30,$30,$30,$50,$4D
	.db $50,$4D,$30,$30,$30,$30,$4D,$50
	.db $4D,$50,$30,$30,$30,$30,$50,$51
	.db $54,$51,$54,$51,$54,$51,$54,$51
	.db $50,$54,$4D,$54,$50,$54,$4D,$54
	.db $4E,$4F,$4E,$4F,$4D,$4E,$4F,$50
	.db $4D,$4E,$4F,$4E,$4F,$4E,$4F,$50
	.db $50,$4D,$4E,$4F,$50,$4D,$4E,$4F
	.db $4E,$4F,$50,$4D,$4E,$4F,$50,$4D
	.db $4D,$4E,$4F,$4E,$4F,$4E,$4F,$50
	.db $50,$4D,$4E,$4F,$4D,$50,$4E,$4F
	.db $39,$17,$17,$1F,$17,$17,$17,$05
	.db $09,$1A,$1B,$1A,$1B,$1A,$1B,$06
	.db $33,$2A,$2B,$2A,$2B,$2A,$2B,$28
	.db $39,$2E,$2F,$2E,$2F,$2E,$2F,$05
	.db $09,$17,$17,$17,$16,$17,$17,$06
	.db $33,$1F,$17,$17,$17,$17,$17,$28
	.db $39,$17,$17,$16,$17,$1F,$17,$05
	.db $09,$16,$17,$17,$17,$17,$17,$06
	.db $20,$27,$27,$27,$27,$0A,$27,$0A
	.db $09,$17,$17,$16,$17,$1E,$1F,$1E
	.db $33,$1F,$16,$17,$1F,$1C,$16,$1C
	.db $0D,$17,$17,$16,$17,$11,$12,$11
	.db $43,$46,$47,$47,$47,$48,$30,$48
	.db $45,$4C,$4C,$4C,$4C,$49,$4A,$49
	.db $5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F
	.db $5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F
	.db $5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F
	.db $5F,$5F,$5F,$5F,$5F,$5F,$5F,$5F
	.db $4E,$4F,$30,$30,$30,$30,$4D,$4E
	.db $50,$4D,$30,$30,$30,$30,$50,$4D
	.db $4E,$4F,$30,$30,$30,$30,$4D,$50
	.db $50,$4D,$30,$30,$30,$30,$4E,$4F
Level62BGPointerData:
	.dw Level62BGData+$0000
	.dw Level62BGData+$0030
	.dw Level62BGData+$0070
	.dw Level62BGData+$00B0
	.dw Level62BGData+$00E0
	.dw Level62BGData+$0110
	.dw Level62BGData+$0140
	.dw Level62BGData+$0170
	.dw Level62BGData+$01B0
	.dw Level62BGData+$0220
	.dw Level62BGData+$01F0
Level62BGData:
	.db $0A,$27,$0A,$27,$27,$27,$27,$29
	.db $1E,$1F,$1E,$17,$17,$17,$16,$05
	.db $1C,$16,$1C,$17,$16,$17,$17,$06
	.db $11,$12,$11,$17,$17,$17,$1F,$0C
	.db $48,$30,$48,$47,$46,$47,$47,$42
	.db $49,$4A,$49,$4C,$4C,$4C,$4C,$44
	.db $07,$27,$27,$27,$27,$27,$27,$29
	.db $39,$16,$17,$17,$1F,$17,$17,$05
	.db $09,$17,$17,$17,$17,$17,$1F,$06
	.db $0D,$17,$17,$17,$16,$17,$17,$0C
	.db $80,$1F,$17,$17,$17,$17,$1F,$7F
	.db $6A,$7B,$7B,$7B,$7B,$7B,$7B,$2D
	.db $33,$17,$17,$17,$17,$17,$17,$28
	.db $39,$17,$17,$17,$17,$17,$16,$05
	.db $07,$27,$27,$27,$27,$27,$27,$29
	.db $39,$16,$17,$17,$1F,$17,$17,$05
	.db $09,$17,$17,$17,$17,$17,$1F,$06
	.db $0D,$17,$17,$17,$16,$17,$17,$0C
	.db $93,$91,$91,$91,$91,$91,$91,$92
	.db $94,$7D,$7D,$7D,$7D,$7D,$7D,$7C
	.db $95,$30,$30,$30,$30,$30,$30,$9B
	.db $96,$30,$30,$30,$30,$30,$30,$9C
	.db $37,$30,$30,$7E,$37,$30,$30,$7E
	.db $3B,$86,$81,$3A,$3B,$86,$81,$3A
	.db $3E,$87,$82,$3D,$3E,$87,$82,$3D
	.db $41,$88,$83,$40,$41,$88,$83,$40
	.db $32,$89,$84,$31,$32,$89,$84,$31
	.db $35,$8A,$85,$18,$35,$8A,$85,$18
	.db $37,$30,$30,$30,$30,$30,$30,$7E
	.db $3B,$86,$30,$30,$30,$30,$81,$3A
	.db $3E,$87,$8B,$30,$30,$8E,$82,$3D
	.db $41,$88,$8C,$30,$30,$8F,$83,$40
	.db $32,$89,$8C,$30,$30,$8F,$84,$31
	.db $35,$8A,$8D,$4A,$4A,$90,$85,$18
	.db $33,$17,$16,$17,$17,$17,$1F,$28
	.db $39,$17,$17,$17,$1F,$17,$17,$05
	.db $09,$1F,$17,$17,$17,$16,$17,$06
	.db $0D,$17,$16,$17,$17,$1F,$17,$0C
	.db $43,$47,$47,$47,$47,$47,$47,$42
	.db $45,$4C,$4C,$4C,$4C,$4C,$4C,$44
	.db $95,$30,$30,$30,$30,$30,$30,$9B
	.db $96,$30,$30,$30,$30,$30,$30,$9C
	.db $97,$30,$30,$30,$30,$30,$30,$9D
	.db $98,$30,$30,$30,$30,$30,$30,$9E
	.db $99,$30,$30,$30,$30,$30,$30,$9F
	.db $9A,$4A,$4A,$4A,$4A,$4A,$4A,$A0
	.db $95,$30,$30,$30,$30,$30,$30,$7E
	.db $96,$30,$30,$30,$30,$30,$30,$3A
	.db $97,$30,$30,$30,$30,$30,$30,$3D
	.db $98,$30,$30,$30,$30,$30,$30,$40
	.db $99,$30,$30,$30,$30,$30,$30,$31
	.db $A1,$7D,$7D,$7D,$7D,$7D,$7D,$7C
	.db $95,$30,$30,$30,$30,$30,$30,$9B
	.db $96,$30,$30,$30,$30,$30,$30,$9C
	.db $95,$30,$30,$30,$30,$30,$30,$7E
	.db $96,$30,$30,$30,$30,$30,$30,$3A
	.db $97,$30,$30,$30,$30,$30,$30,$3D
	.db $98,$30,$30,$30,$30,$30,$30,$40
	.db $99,$30,$30,$30,$30,$30,$30,$31
	.db $A1,$7D,$7D,$7D,$7D,$7D,$7D,$7C
	.db $07,$27,$27,$27,$27,$27,$27,$29
	.db $39,$1F,$17,$17,$17,$16,$17,$05
	.db $00,$00,$00,$A7,$A7,$00,$00,$00
	.db $00,$00,$00,$A7,$A7,$00,$00,$00
	.db $00,$00,$00,$A8,$A9,$00,$00,$00
	.db $00,$00,$00,$AC,$AD,$00,$00,$00
	.db $00,$00,$00,$AA,$AB,$00,$00,$00
	.db $00,$00,$00,$AE,$A6,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
Level61TileData:
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$05,$06,$02,$02,$0A,$0B,$07,$07
	.db $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$00,$00,$03,$04,$00,$00,$08,$09
	.db $0F,$10,$0C,$0C,$12,$10,$11,$11,$0F,$10,$11,$11,$0F,$10,$11,$11
	.db $0C,$0C,$0D,$0E,$11,$11,$0D,$0E,$11,$11,$0D,$0E,$11,$11,$0D,$13
	.db $11,$11,$0D,$0E,$11,$11,$0D,$0E,$11,$11,$0D,$0E,$11,$11,$0D,$0E
	.db $11,$11,$0D,$0E,$11,$11,$14,$15,$20,$11,$0D,$0E,$11,$20,$0D,$0E
	.db $0F,$10,$02,$02,$0F,$10,$07,$07,$0F,$10,$0C,$0C,$16,$17,$11,$11
	.db $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$00,$00,$00,$00,$00,$00,$00,$00
	.db $0F,$10,$11,$11,$16,$17,$11,$11,$0F,$19,$11,$11,$0F,$10,$11,$11
	.db $0D,$13,$0F,$10,$0D,$0E,$0F,$19,$0D,$0E,$0F,$10,$14,$18,$16,$17
	.db $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$02,$02,$03,$04,$07,$07,$08,$09
	.db $11,$11,$0D,$13,$11,$11,$0D,$0E,$11,$11,$0D,$0E,$11,$11,$1A,$1B
	.db $0F,$10,$11,$11,$0F,$10,$11,$11,$0F,$10,$11,$11,$1C,$1D,$11,$11
	.db $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$02,$02,$02,$02,$07,$07,$07,$07
	.db $00,$00,$00,$00,$00,$00,$00,$51,$51,$00,$00,$52,$52,$00,$53,$54
	.db $5B,$5C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $0D,$0E,$0F,$10,$0D,$0E,$0F,$19,$0D,$0E,$0F,$10,$1A,$1B,$1C,$1D
	.db $20,$11,$11,$11,$22,$23,$24,$25,$27,$00,$00,$28,$00,$00,$00,$00
	.db $D4,$D1,$D0,$D1,$D5,$D3,$D2,$D3,$02,$02,$03,$04,$07,$07,$08,$09
	.db $00,$00,$4F,$50,$00,$00,$49,$00,$00,$00,$4C,$00,$00,$00,$00,$00
	.db $4D,$4E,$00,$00,$45,$46,$47,$48,$4A,$4B,$00,$00,$00,$49,$00,$00
	.db $11,$11,$11,$11,$11,$20,$11,$20,$20,$1E,$30,$21,$11,$11,$11,$20
	.db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11
	.db $00,$00,$3D,$3E,$00,$00,$41,$42,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $0C,$0C,$0C,$0C,$20,$11,$20,$11,$11,$20,$11,$11,$11,$11,$11,$11
	.db $11,$11,$11,$11,$11,$20,$11,$11,$11,$11,$20,$11,$11,$11,$22,$23
	.db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$24,$25,$20,$11
	.db $0D,$0E,$12,$10,$14,$15,$16,$17,$0D,$0E,$0F,$10,$0D,$0E,$0F,$10
	.db $9B,$F0,$9C,$F2,$AF,$A0,$A1,$A2,$65,$66,$67,$68,$75,$76,$77,$78
	.db $0D,$13,$0F,$10,$0D,$0E,$0F,$10,$0D,$0E,$0F,$10,$0D,$0E,$0F,$10
	.db $11,$11,$11,$11,$11,$11,$1E,$1F,$11,$11,$1E,$30,$11,$1E,$21,$11
	.db $0F,$10,$02,$02,$12,$10,$07,$07,$0F,$10,$0C,$0C,$0F,$10,$11,$11
	.db $33,$33,$33,$33,$34,$34,$34,$34,$D0,$D1,$D0,$D4,$D2,$D3,$D2,$D5
	.db $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
	.db $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$00,$00,$02,$02,$00,$00,$07,$07
	.db $D4,$D1,$D0,$D1,$D5,$D3,$D2,$D3,$00,$00,$03,$04,$00,$00,$08,$09
	.db $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$05,$06,$00,$00,$0A,$0B,$00,$00
	.db $0C,$0C,$0C,$0C,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11
	.db $02,$02,$02,$02,$07,$07,$07,$07,$0C,$0C,$0C,$0C,$11,$11,$11,$11
	.db $11,$11,$0D,$13,$11,$11,$0D,$0E,$11,$11,$0D,$0E,$11,$11,$14,$18
	.db $02,$02,$0D,$0E,$07,$07,$0D,$0E,$0C,$0C,$0D,$0E,$11,$20,$14,$15
	.db $11,$26,$27,$00,$11,$2A,$00,$00,$11,$2D,$00,$00,$11,$2D,$00,$00
	.db $00,$28,$29,$11,$00,$00,$2B,$2C,$00,$00,$2D,$2E,$00,$00,$2D,$2E
	.db $02,$02,$0D,$13,$07,$07,$0D,$0E,$0C,$0C,$0D,$0E,$11,$11,$0D,$0E
	.db $11,$11,$3D,$3E,$11,$11,$41,$42,$5D,$5E,$5D,$5E,$5F,$80,$5F,$80
	.db $11,$2D,$00,$00,$11,$2D,$00,$00,$11,$2D,$2D,$2D,$11,$2F,$2F,$2F
	.db $00,$00,$2D,$2E,$00,$00,$2D,$2E,$2D,$2D,$2D,$2E,$2F,$2F,$2F,$2E
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$0D,$37,$00,$00,$0D,$37,$00,$00,$0D,$37,$00,$00,$39,$3A
	.db $38,$10,$00,$00,$38,$10,$00,$00,$38,$10,$00,$00,$3B,$3C,$00,$00
	.db $0F,$10,$11,$11,$0F,$10,$11,$11,$0F,$10,$11,$11,$16,$17,$11,$11
	.db $00,$00,$3D,$3E,$00,$00,$41,$42,$D4,$D1,$D0,$D1,$D5,$D3,$D2,$D3
	.db $3F,$40,$00,$00,$43,$44,$00,$00,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $00,$00,$33,$33,$00,$00,$00,$34,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $0F,$10,$00,$00,$12,$10,$00,$00,$0F,$10,$00,$00,$16,$17,$00,$00
	.db $11,$11,$0D,$0E,$11,$11,$0D,$0E,$11,$11,$0D,$13,$32,$32,$0D,$0E
	.db $0F,$10,$11,$11,$12,$10,$11,$11,$0F,$10,$11,$11,$0F,$10,$11,$11
	.db $00,$00,$0D,$0E,$00,$00,$0D,$0E,$00,$00,$0D,$13,$00,$00,$0D,$0E
	.db $0F,$10,$00,$00,$12,$10,$00,$00,$0F,$10,$00,$00,$0F,$10,$00,$00
	.db $11,$11,$1E,$30,$11,$11,$31,$30,$11,$11,$1E,$30,$11,$11,$31,$30
	.db $00,$00,$0D,$0E,$00,$00,$14,$15,$00,$00,$0D,$0E,$00,$00,$0D,$0E
	.db $0F,$10,$00,$00,$16,$17,$00,$00,$0F,$10,$00,$00,$0F,$10,$00,$00
	.db $00,$35,$11,$11,$00,$35,$11,$11,$00,$36,$11,$11,$00,$35,$11,$11
	.db $00,$00,$0D,$0E,$00,$00,$0D,$0E,$00,$00,$0D,$0E,$00,$00,$1A,$1B
	.db $0F,$10,$00,$00,$0F,$19,$00,$00,$0F,$10,$00,$00,$1C,$1D,$00,$00
	.db $11,$11,$0D,$37,$11,$11,$0D,$37,$11,$11,$0D,$37,$32,$32,$39,$3A
	.db $38,$10,$11,$11,$38,$10,$11,$11,$38,$10,$11,$11,$3B,$3C,$32,$32
	.db $33,$33,$3D,$3E,$34,$34,$41,$42,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $3F,$40,$33,$33,$43,$44,$34,$34,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $11,$11,$31,$1F,$11,$20,$11,$11,$11,$11,$11,$11,$32,$32,$32,$32
	.db $11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$32,$32,$32,$32
	.db $0D,$37,$38,$10,$0D,$37,$38,$10,$0D,$37,$38,$10,$39,$3A,$3B,$3C
	.db $3D,$3E,$3F,$40,$41,$42,$43,$44,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $00,$00,$00,$00,$00,$00,$00,$00,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3,$03,$04,$05,$06,$08,$09,$0A,$0B
	.db $33,$33,$33,$33,$34,$34,$34,$34,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $F8,$F9,$FA,$FB,$A8,$A9,$AA,$AB,$B8,$B9,$BA,$BB,$C8,$C9,$CA,$CB
	.db $EB,$F0,$F1,$F2,$AF,$A0,$A1,$A2,$BF,$B0,$B1,$B2,$CF,$C0,$C1,$C2
	.db $F3,$FC,$FD,$FE,$A3,$AC,$AD,$AE,$B3,$BC,$BD,$BE,$C3,$CC,$CD,$CE
	.db $F4,$F5,$F6,$F7,$A4,$A5,$A6,$A7,$B4,$B5,$B6,$B7,$C4,$C5,$C6,$C7
	.db $B8,$B9,$BA,$BB,$C8,$C9,$CA,$CB,$F4,$F5,$F6,$F7,$A4,$A5,$A6,$A7
	.db $B3,$BC,$BD,$BE,$C3,$CC,$CD,$CE,$B8,$B9,$BA,$BB,$C8,$C9,$CA,$CB
	.db $BF,$B0,$B1,$B2,$CF,$C0,$C1,$C2,$F4,$F5,$F6,$F7,$A4,$A5,$A6,$A7
	.db $B4,$B5,$B6,$B7,$C4,$C5,$C6,$C7,$F8,$F9,$FA,$FB,$A8,$A9,$AA,$AB
	.db $F8,$F9,$FA,$FB,$A8,$A9,$AA,$AB,$DA,$DB,$D8,$D9,$DC,$DD,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$EB,$F0,$F1,$F2,$AF,$A0,$A1,$A2
	.db $00,$00,$00,$00,$00,$00,$00,$00,$F3,$FC,$FD,$FE,$A3,$AC,$AD,$AE
	.db $00,$00,$00,$00,$00,$00,$00,$00,$F4,$F5,$F6,$F7,$A4,$A5,$A6,$A7
	.db $DE,$DF,$E0,$E1,$00,$E5,$E6,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $E2,$E3,$E4,$00,$E7,$E8,$E9,$00,$00,$EA,$00,$00,$00,$00,$00,$00
	.db $81,$82,$81,$82,$83,$84,$83,$84,$00,$00,$00,$00,$00,$00,$00,$00
	.db $D6,$D7,$DA,$DB,$00,$00,$DC,$DD,$4F,$50,$00,$00,$49,$00,$4D,$4E
	.db $F8,$F9,$FA,$FB,$A8,$A9,$AA,$AB,$D8,$D9,$DA,$DB,$00,$00,$DC,$DD
	.db $DA,$DB,$D6,$D7,$DC,$DD,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
	.db $55,$56,$5B,$5C,$59,$5A,$00,$00,$96,$00,$97,$DB,$D8,$D9,$DC,$DD
	.db $96,$00,$97,$DB,$D6,$D7,$DC,$DD,$9D,$F9,$9E,$FB,$A8,$A9,$AA,$AB
	.db $96,$00,$97,$DB,$D8,$D9,$DC,$DD,$9B,$F5,$9C,$F7,$A4,$A5,$A6,$A7
	.db $99,$DB,$98,$00,$DC,$DD,$D8,$D9,$9D,$F9,$9E,$FB,$A8,$A9,$AA,$AB
	.db $57,$58,$55,$56,$00,$00,$59,$5A,$99,$DB,$98,$00,$DC,$DD,$D6,$D7
	.db $00,$00,$00,$00,$00,$51,$00,$00,$00,$52,$00,$00,$53,$54,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$51,$00,$00
	.db $00,$00,$00,$4C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$4C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $4C,$00,$45,$46,$00,$00,$4A,$4B,$00,$00,$00,$49,$00,$00,$00,$4C
	.db $3F,$40,$11,$11,$43,$44,$11,$11,$5D,$5E,$5D,$5E,$5F,$80,$5F,$80
	.db $00,$00,$4F,$50,$47,$48,$49,$00,$00,$00,$4C,$00,$00,$00,$00,$00
	.db $4F,$50,$4D,$4E,$49,$00,$45,$46,$4C,$00,$4A,$4B,$00,$00,$00,$49
	.db $4F,$50,$00,$00,$49,$00,$00,$00,$4C,$00,$00,$00,$00,$00,$00,$00
	.db $47,$48,$4F,$50,$00,$00,$49,$00,$00,$00,$4C,$00,$00,$00,$00,$00
	.db $4F,$50,$45,$46,$49,$00,$4A,$4B,$4C,$00,$00,$49,$00,$00,$00,$4C
	.db $F8,$F9,$9E,$FB,$A8,$A9,$AA,$AB,$B8,$B9,$70,$BB,$C8,$C9,$CA,$CB
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$51
	.db $00,$00,$00,$52,$51,$00,$53,$54,$52,$00,$55,$56,$57,$58,$59,$5A
	.db $00,$00,$51,$00,$00,$00,$52,$00,$5B,$5C,$57,$58,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$51,$00,$5B,$5C,$52,$00,$00,$00,$57,$58
	.db $00,$52,$00,$00,$53,$54,$00,$00,$55,$56,$5B,$5C,$59,$5A,$00,$00
	.db $9D,$F9,$FA,$FB,$A8,$A9,$AA,$AB,$63,$B9,$BA,$BB,$C8,$C9,$CA,$CB
	.db $00,$00,$00,$00,$00,$00,$00,$00,$9D,$F9,$FA,$FB,$A8,$A9,$AA,$AB
	.db $00,$00,$00,$00,$00,$00,$00,$00,$F3,$FC,$9F,$FE,$A3,$AC,$AD,$AE
	.db $60,$61,$62,$63,$70,$71,$72,$73,$65,$66,$67,$68,$75,$76,$77,$78
	.db $64,$6A,$6B,$6C,$74,$7A,$7B,$AE,$69,$6D,$6E,$6F,$79,$7D,$7E,$7F
	.db $11,$11,$11,$11,$11,$11,$11,$11,$5D,$5E,$5D,$5E,$5F,$80,$5F,$80
	.db $00,$00,$3D,$3E,$00,$00,$41,$42,$5D,$5E,$5D,$5E,$5F,$80,$5F,$80
	.db $00,$00,$00,$00,$00,$00,$00,$00,$5D,$5E,$5D,$5E,$5F,$80,$5F,$80
	.db $00,$00,$0D,$13,$00,$00,$0D,$0E,$00,$00,$0D,$0E,$00,$00,$14,$18
	.db $11,$11,$0D,$37,$11,$11,$0D,$37,$11,$11,$0D,$37,$11,$11,$39,$3A
	.db $38,$10,$11,$11,$38,$10,$11,$11,$38,$10,$11,$11,$3B,$3C,$11,$11
	.db $00,$00,$88,$89,$00,$00,$8A,$8B,$00,$00,$8C,$8D,$00,$00,$8A,$8B
	.db $00,$00,$8A,$8B,$00,$00,$8C,$8D,$00,$00,$8A,$8B,$00,$00,$8A,$8B
	.db $00,$00,$8C,$8D,$00,$00,$8E,$8B,$00,$00,$8A,$8B,$00,$00,$8C,$8D
	.db $00,$00,$8A,$8B,$00,$00,$8A,$8B,$00,$00,$8C,$8D,$00,$00,$8A,$8B
	.db $00,$00,$92,$93,$00,$00,$94,$8F,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $88,$89,$00,$00,$8A,$8B,$00,$00,$8C,$8D,$00,$00,$8A,$8B,$00,$00
	.db $8A,$8B,$00,$00,$8C,$8D,$00,$00,$8E,$8B,$00,$00,$8A,$8B,$00,$00
	.db $8C,$8D,$00,$00,$8A,$8B,$00,$00,$8A,$8B,$00,$00,$8C,$8D,$00,$00
	.db $8A,$8B,$00,$00,$8A,$8B,$00,$00,$8C,$8D,$00,$00,$8A,$8B,$00,$00
	.db $92,$93,$00,$00,$94,$8F,$00,$00,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $85,$00,$00,$00,$86,$00,$00,$00,$87,$00,$00,$00,$86,$00,$00,$00
	.db $87,$00,$00,$00,$86,$00,$00,$00,$87,$00,$00,$00,$86,$00,$00,$00
	.db $90,$00,$00,$00,$91,$00,$00,$00,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $00,$00,$00,$85,$00,$00,$00,$86,$00,$00,$00,$87,$00,$00,$00,$86
	.db $00,$00,$00,$87,$00,$00,$00,$86,$00,$00,$00,$87,$00,$00,$00,$86
	.db $00,$00,$00,$90,$00,$00,$00,$91,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $11,$11,$11,$11,$32,$32,$32,$32,$33,$33,$33,$33,$34,$34,$34,$34
	.db $11,$11,$0D,$37,$32,$32,$0D,$37,$33,$33,$0D,$37,$34,$34,$39,$3A
	.db $38,$10,$11,$11,$38,$10,$32,$32,$38,$10,$33,$33,$3B,$3C,$34,$34
	.db $3F,$40,$00,$00,$43,$44,$00,$00,$5D,$5E,$5D,$5E,$5F,$80,$5F,$80
	.db $0F,$10,$00,$00,$12,$10,$00,$00,$0F,$10,$00,$00,$16,$17,$00,$00
	.db $0F,$10,$00,$00,$0F,$10,$00,$00,$0F,$10,$00,$00,$0F,$10,$00,$00
	.db $0F,$10,$00,$00,$16,$17,$00,$00,$0F,$10,$00,$00,$0F,$10,$00,$00
	.db $0F,$10,$00,$00,$0F,$10,$00,$00,$0F,$10,$00,$00,$1C,$1D,$00,$00
	.db $38,$10,$00,$00,$38,$10,$00,$00,$38,$10,$00,$00,$3B,$3C,$00,$00
	.db $3F,$40,$00,$00,$43,$44,$00,$00,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $00,$00,$0D,$13,$00,$00,$0D,$0E,$00,$00,$0D,$0E,$00,$00,$14,$18
	.db $00,$00,$0D,$0E,$00,$00,$0D,$0E,$00,$00,$0D,$13,$00,$00,$0D,$0E
	.db $00,$00,$0D,$0E,$00,$00,$14,$15,$00,$00,$0D,$0E,$00,$00,$0D,$0E
	.db $00,$00,$0D,$0E,$00,$00,$0D,$0E,$00,$00,$0D,$0E,$00,$00,$1A,$1B
	.db $00,$00,$0D,$37,$00,$00,$0D,$37,$00,$00,$0D,$37,$00,$00,$39,$3A
	.db $00,$00,$3D,$3E,$00,$00,$41,$42,$D0,$D1,$D0,$D1,$D2,$D3,$D2,$D3
	.db $3F,$40,$00,$00,$43,$44,$00,$00,$5D,$5E,$5D,$5E,$5F,$80,$5F,$80
	.db $B3,$BC,$6E,$6F,$C3,$CC,$7E,$7F,$FC,$FD,$6B,$6C,$AC,$AD,$7B,$7C
	.db $60,$61,$F1,$F2,$70,$71,$A1,$A2,$65,$66,$B1,$B2,$75,$76,$C1,$C2
	.db $EB,$F0,$62,$63,$AF,$A0,$72,$73,$BF,$B0,$67,$68,$CF,$C0,$77,$78
	.db $64,$6A,$FD,$FE,$74,$7A,$AD,$AE,$69,$6D,$BD,$BE,$79,$7D,$CD,$CE
	.db $00,$43,$44,$45,$49,$4A,$4B,$4C,$50,$44,$51,$00,$55,$56,$57,$00
	.db $0E,$0F,$10,$11,$00,$16,$17,$00,$1A,$1B,$1C,$1D,$21,$22,$23,$24
	.db $08,$09,$0A,$0B,$12,$04,$13,$00,$18,$13,$00,$14,$1E,$00,$14,$04
	.db $0C,$09,$0A,$0D,$14,$04,$13,$15,$04,$13,$00,$19,$13,$00,$1F,$20
	.db $00,$00,$2F,$30,$00,$00,$33,$34,$00,$00,$00,$38,$00,$00,$00,$00
	.db $31,$32,$00,$00,$35,$36,$37,$00,$39,$3A,$3B,$3C,$3D,$3E,$3F,$40
	.db $25,$14,$04,$13,$12,$04,$13,$00,$27,$13,$00,$14,$00,$29,$2A,$2B
	.db $00,$14,$04,$26,$14,$04,$13,$15,$04,$13,$00,$28,$2C,$2D,$2E,$00
	.db $41,$42,$00,$00,$46,$47,$48,$00,$00,$4D,$4E,$4F,$00,$52,$53,$54
Level61AttrData:
	.db $AA,$D5,$75,$DD,$77,$77,$77,$DD,$F5,$DD,$55,$75,$77,$DD,$F5,$AA
	.db $FE,$55,$FF,$75,$BB,$AA,$FF,$FF,$57,$FF,$FF,$FF,$55,$AA,$55,$FF
	.db $DD,$5F,$FF,$F5,$75,$D5,$FF,$FF,$77,$77,$FF,$FF,$77,$57,$FF,$FF
	.db $DD,$75,$5D,$DD,$57,$55,$5D,$DD,$77,$DD,$77,$DD,$FF,$77,$DD,$FF
	.db $77,$9D,$77,$DD,$57,$5D,$FF,$FF,$55,$55,$55,$55,$5F,$AA,$AA,$AA
	.db $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$5A,$FF
	.db $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$5D,$AA,$AA,$AA,$AA,$AA
	.db $AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$5F,$55,$5F,$77,$77
	.db $DD,$77,$77,$75,$77,$57,$DD,$DD,$DD,$DD,$5D,$DD,$DD,$5D,$77,$77
	.db $57,$FF,$77,$DD,$5D,$EE,$EE,$EE,$EE,$EE,$5E,$BB,$BB,$BB,$BB,$BB
	.db $5B,$5E,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA
Level63BGPointerData:
	.dw Level63BGData+$0000
	.dw Level63BGData+$0040
	.dw Level63BGData+$0080
Level63BGData:
	.db $0E,$01,$02,$02,$02,$02,$05,$0E
	.db $0E,$03,$04,$04,$04,$04,$06,$0E
	.db $0E,$03,$04,$04,$04,$04,$06,$0E
	.db $0E,$03,$04,$04,$04,$04,$06,$0E
	.db $07,$08,$09,$0A,$10,$11,$12,$07
	.db $0B,$0C,$0D,$0D,$0D,$0D,$13,$0B
	.db $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $0E,$01,$14,$14,$14,$14,$05,$0E
	.db $0E,$03,$15,$16,$19,$15,$06,$0E
	.db $0E,$03,$15,$17,$1A,$15,$06,$0E
	.db $0E,$03,$15,$18,$1B,$15,$06,$0E
	.db $07,$08,$09,$0A,$10,$11,$12,$07
	.db $0B,$0C,$0D,$0D,$0D,$0D,$13,$0B
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $0E,$01,$14,$14,$14,$14,$05,$0E
	.db $0E,$03,$15,$16,$19,$15,$06,$0E
	.db $0E,$03,$15,$1C,$1E,$15,$06,$0E
	.db $0E,$03,$15,$1D,$1F,$15,$06,$0E
	.db $07,$08,$09,$0A,$10,$11,$12,$07
	.db $0B,$0C,$0D,$0D,$0D,$0D,$13,$0B
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
Level63TileData:
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $80,$80,$89,$8A,$80,$80,$8B,$8C,$80,$80,$8E,$8F,$80,$80,$8E,$BB
	.db $8A,$8A,$8A,$8A,$8D,$8D,$8D,$8D,$68,$78,$68,$78,$79,$69,$79,$69
	.db $80,$80,$8E,$BB,$80,$80,$8E,$BB,$80,$80,$8E,$BB,$80,$80,$8E,$BB
	.db $69,$79,$69,$79,$79,$69,$79,$69,$69,$79,$69,$79,$79,$69,$79,$69
	.db $8A,$BC,$80,$80,$BD,$BE,$80,$80,$98,$BE,$80,$80,$99,$BE,$80,$80
	.db $99,$BE,$80,$80,$99,$BE,$80,$80,$99,$BE,$80,$80,$99,$BE,$80,$80
	.db $9A,$9A,$9A,$9A,$9F,$9F,$9F,$9F,$C8,$C8,$C8,$C8,$D8,$D8,$D8,$D8
	.db $9A,$9A,$8E,$9B,$9F,$9F,$8E,$00,$C8,$C8,$94,$95,$D8,$D8,$96,$A8
	.db $9C,$9C,$9C,$9C,$00,$00,$00,$00,$95,$95,$95,$95,$A8,$A8,$A8,$A8
	.db $9D,$9E,$9C,$9C,$00,$00,$C9,$CA,$95,$95,$95,$95,$A8,$A8,$A8,$A8
	.db $D8,$D8,$D8,$D8,$D8,$D8,$D8,$D8,$FE,$FE,$FE,$FE,$AC,$AC,$AC,$AC
	.db $D8,$D8,$A9,$AA,$D8,$D8,$D8,$D8,$FE,$FE,$FE,$FE,$AC,$AC,$AC,$AC
	.db $AA,$AA,$AA,$AA,$D8,$D8,$D8,$D8,$FE,$FE,$FE,$FE,$AC,$AC,$AC,$AC
	.db $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $9C,$9C,$9D,$9E,$CB,$CC,$00,$00,$87,$95,$A4,$A4,$CF,$A8,$CE,$CE
	.db $9C,$9C,$9C,$AD,$00,$00,$00,$00,$A4,$A6,$95,$A6,$CE,$CD,$A8,$CD
	.db $AE,$BE,$9A,$9A,$00,$BE,$9F,$9F,$A4,$E8,$C8,$C8,$CE,$B8,$D8,$D8
	.db $AA,$B9,$D8,$D8,$D8,$D8,$D8,$D8,$FE,$FE,$FE,$FE,$AC,$AC,$AC,$AC
	.db $8A,$8A,$8A,$8A,$8D,$8D,$8D,$8D,$BA,$BA,$BA,$BA,$80,$80,$80,$80
	.db $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
	.db $80,$81,$82,$83,$90,$91,$92,$93,$A0,$A1,$A2,$A3,$B0,$B1,$B2,$B3
	.db $C0,$C1,$C2,$C3,$D0,$D1,$D2,$D3,$E0,$E1,$E2,$E3,$F0,$F1,$F2,$F3
	.db $80,$AB,$60,$61,$80,$AF,$70,$71,$80,$BF,$64,$65,$F8,$00,$74,$75
	.db $84,$85,$86,$80,$00,$00,$00,$97,$00,$A5,$00,$A7,$B4,$B5,$B6,$B7
	.db $C4,$C5,$C6,$C7,$D4,$D5,$D6,$D7,$E4,$E5,$E6,$E7,$F4,$F5,$F6,$F7
	.db $62,$63,$DE,$80,$72,$73,$DF,$80,$66,$67,$EF,$80,$76,$77,$00,$F9
	.db $C0,$C1,$02,$C3,$D0,$11,$12,$13,$E0,$21,$22,$23,$F0,$31,$32,$33
	.db $80,$41,$42,$43,$80,$51,$52,$53,$80,$BF,$20,$40,$F8,$00,$30,$50
	.db $C4,$05,$C6,$C7,$14,$15,$16,$D7,$24,$25,$26,$E7,$34,$35,$36,$F7
	.db $44,$45,$46,$80,$54,$55,$56,$80,$47,$27,$EF,$80,$57,$37,$00,$F9
Level63AttrData:
	.db $00,$55,$55,$55,$55,$55,$55,$FF,$77,$55,$55,$FF,$FF,$FF,$55,$55
	.db $55,$55,$DD,$FF,$A5,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA

;;;;;;;;;;;;;;;;
;NAMETABLE DATA;
;;;;;;;;;;;;;;;;
TVFaceVRAMData:
	.dw $2840
	.db $06,$80,$82,$8E,$8F,$10,$BA,$82,$98,$BE,$0C,$80,$82,$8E,$BB,$10
	.db $80,$82,$99,$BE,$0C,$80,$82,$8E,$BB,$05,$80,$C6,$81,$05,$80,$82
	.db $99,$BE,$0C,$80,$82,$8E,$BB,$04,$80,$C4,$90,$03,$00,$81,$97,$04
	.db $80,$82,$99,$BE,$0C,$80,$82,$8E,$BB,$04,$80,$C4,$A0,$84,$00,$A5
	.db $00,$A7,$04,$80,$82,$99,$BE,$0C,$80,$82,$8E,$BB,$04,$80,$C8,$B0
	.db $04,$80,$82,$99,$BE,$0C,$80,$82,$8E,$BB,$04,$80,$C8,$C0,$04,$80
	.db $82,$99,$BE,$0C,$80,$82,$8E,$BB,$04,$80,$C8,$D0,$04,$80,$82,$99
	.db $BE,$0C,$80,$82,$8E,$BB,$04,$80,$C8,$E0,$04,$80,$82,$99,$BE,$0C
	.db $80,$82,$8E,$BB,$04,$80,$C8,$F0,$04,$80,$82,$99,$BE,$0C,$80,$82
	.db $8E,$BB,$05,$80,$81,$AB,$C4,$60,$81,$DE,$05,$80,$82,$99,$BE,$0C
	.db $80,$82,$8E,$BB,$05,$80,$81,$AF,$C4,$70,$81,$DF,$05,$80,$82,$99
	.db $BE,$0C,$80,$82,$8E,$BB,$05,$80,$81,$BF,$C4,$64,$81,$EF,$05,$80
	.db $82,$99,$BE,$0C,$80,$82,$8E,$BB,$04,$80,$82,$F8,$00,$C4,$74,$82
	.db $00,$F9,$04,$80,$82,$99,$BE,$06,$80,$80,$C0,$2B,$02,$55,$04,$A5
	.db $04,$55,$04,$AA,$04,$55,$04,$AA,$04,$55,$04,$AA,$02,$55,$00
	.db $FF
Nametable12Data:
	.dw $2180
	.db $06,$80,$81,$89,$12,$8A,$81,$BC,$0C,$80,$C3,$8B,$0F,$8D,$82,$BD
	.db $BE,$0C,$80,$82,$8E,$8F,$10,$BA,$82,$98,$BE,$33,$80,$C6,$81,$19
	.db $80,$C4,$90,$03,$00,$81,$97,$18,$80,$C4,$A0,$84,$00,$A5,$00,$A7
	.db $18,$80,$C8,$B0,$18,$80,$C8,$C0,$18,$80,$C8,$D0,$18,$80,$C8,$E0
	.db $18,$80,$C8,$F0,$19,$80,$81,$AB,$C4,$60,$81,$DE,$1A,$80,$81,$AF
	.db $C4,$70,$81,$DF,$1A,$80,$81,$BF,$C4,$64,$81,$EF,$19,$80,$82,$F8
	.db $00,$C4,$74,$82,$00,$F9,$0C,$80,$80,$D8,$23,$82,$55,$55,$04,$A5
	.db $04,$55,$04,$AA,$04,$55,$04,$AA,$04,$55,$04,$AA,$82,$55,$55,$00
TVStaticVRAMData:
	.dw $2840
	.db $06,$80,$94,$8E,$8F,$68,$78,$68,$78,$68,$78,$68,$78,$68,$78,$68
	.db $78,$68,$78,$68,$78,$98,$BE,$0C,$80,$94,$8E,$BB,$79,$69,$79,$69
	.db $79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$99,$BE,$0C,$80
	.db $94,$8E,$BB,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69
	.db $79,$69,$79,$99,$BE,$0C,$80,$94,$8E,$BB,$79,$69,$79,$69,$79,$69
	.db $79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$99,$BE,$0C,$80,$94,$8E
	.db $BB,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69
	.db $79,$99,$BE,$0C,$80,$94,$8E,$BB,$79,$69,$79,$69,$79,$69,$79,$69
	.db $79,$69,$79,$69,$79,$69,$79,$69,$99,$BE,$0C,$80,$94,$8E,$BB,$69
	.db $79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$99
	.db $BE,$0C,$80,$94,$8E,$BB,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69
	.db $79,$69,$79,$69,$79,$69,$99,$BE,$0C,$80,$94,$8E,$BB,$69,$79,$69
	.db $79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$99,$BE,$0C
	.db $80,$94,$8E,$BB,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69
	.db $79,$69,$79,$69,$99,$BE,$0C,$80,$94,$8E,$BB,$69,$79,$69,$79,$69
	.db $79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$99,$BE,$0C,$80,$94
	.db $8E,$BB,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69
	.db $79,$69,$99,$BE,$0C,$80,$94,$8E,$BB,$69,$79,$69,$79,$69,$79,$69
	.db $79,$69,$79,$69,$79,$69,$79,$69,$79,$99,$BE,$0C,$80,$94,$8E,$BB
	.db $79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69,$79,$69
	.db $99,$BE,$06,$80,$80,$C0,$2B,$20,$55,$80,$F0,$2B,$10,$00,$00
	.db $FF
TVFaceDeathVRAMData:
	.dw $2180
	.db $06,$80,$81,$89,$12,$8A,$81,$BC,$0C,$80,$C3,$8B,$0F,$8D,$82,$BD
	.db $BE,$0C,$80,$82,$8E,$8F,$10,$BA,$82,$98,$BE,$33,$80,$C6,$81,$19
	.db $80,$C4,$90,$03,$00,$81,$97,$18,$80,$C4,$A0,$84,$00,$A5,$00,$A7
	.db $18,$80,$C8,$B0,$18,$80,$88,$C0,$C1,$4A,$C3,$C4,$4D,$C6,$C7,$18
	.db $80,$81,$D0,$C6,$59,$81,$D7,$18,$80,$82,$E0,$49,$C5,$6A,$81,$E7
	.db $18,$80,$82,$F0,$4C,$C5,$7A,$81,$F7,$19,$80,$C6,$41,$1A,$80,$C6
	.db $51,$1A,$80,$86,$BF,$48,$40,$47,$6F,$EF,$19,$80,$88,$F8,$00,$4B
	.db $50,$57,$7F,$00,$F9,$0C,$80,$80,$D8,$23,$82,$55,$55,$04,$A5,$04
	.db $55,$04,$AA,$04,$55,$04,$AA,$04,$55,$04,$AA,$82,$55,$55,$00
	.db $FF

;;;;;;;;;;;;;;;;;;;;
;GAME MODE ROUTINES;
;;;;;;;;;;;;;;;;;;;;
;INTRO MODE ROUTINES
RunGameMode_Intro:
	;Check for submode < $02 (TV blank in)
	lda GameSubmode
	cmp #$02
	bcc RunGameMode_Intro_JT
	;Check for submode >= $0C (fade out)
	cmp #$0C
	bcs RunGameMode_Intro_JT
	;Check for START press
	lda JoypadDown
	and #JOY_START
	beq RunGameMode_Intro_JT
	;Next submode ($0C: Fade out)
	lda #$0C
	sta GameSubmode
RunGameMode_Intro_JT:
	;Do jump table
	lda GameSubmode
	jsr DoJumpTable
IntroJumpTable:
	.dw RunGameSubmode_IntroInit		;$00  Init
	.dw RunGameSubmode_IntroFadeIn		;$01  Fade in
	.dw RunGameSubmode_IntroTVBlankIn	;$02  TV blank in
	.dw RunGameSubmode_IntroTVStaticIn	;$03  TV static in
	.dw RunGameSubmode_IntroTVScrambleIn	;$04  TV scramble in
	.dw RunGameSubmode_IntroTVWaveIn	;$05  TV wave in
	.dw RunGameSubmode_IntroTVDialog	;$06  TV dialog
	.dw RunGameSubmode_IntroTVWaveOut	;$07  TV wave out
	.dw RunGameSubmode_IntroTVScrambleOut	;$08  TV scramble out
	.dw RunGameSubmode_IntroTVStaticOut	;$09  TV static out
	.dw RunGameSubmode_IntroPlayerDialog	;$0A  Player dialog
	.dw RunGameSubmode_IntroPlayerRun	;$0B  Player run
	.dw RunGameSubmode_IntroFadeOut		;$0C  Fade out
	.dw RunGameSubmode_IntroEnd		;$0D  End

;$00: Init
RunGameSubmode_IntroInit:
	;Clear WRAM
	jsr ClearWRAM
	;Clear nametable
	jsr ClearNametableData
	;Set player animation
	jsr IntroSetPlayerAnimation
	;Set player lives
	lda #$01
	sta PlayerLives
	sta PlayerLives+1
RunGameSubmode_IntroInit_EntEnding:
	;Set sprite boss mode flag
	lda #$FF
	sta SpriteBossModeFlag
	;Clear demo flag
	lda #$00
	sta DemoFlag
	;Next submode ($00: Init)
	sta MainGameSubmode
	;Set current level/area
	lda #$02
	sta CurArea
	lda #$05
	sta CurLevel
	;Init level scroll
	jsr InitLevelScroll_L
RunGameSubmode_IntroInit_WaitVRAMStrip1:
	;Write enemy VRAM strip (clear dialog)
	lda #$0F
	jsr WriteEnemyVRAMStrip34
	;Disable video out
	jsr DisableVideoOut
	;End VRAM buffer
	lda #$00
	jsr WriteVRAMBufferCmd
	;Write VRAM buffer
	jsr WriteVRAMBuffer
	;Set PPU control register
	jsr SetScroll_SetCtrl
	;Check for end of VRAM strip
	lda ElevatorInitFlag
	bne RunGameSubmode_IntroInit_WaitVRAMStrip1
RunGameSubmode_IntroInit_WaitVRAMStrip2:
	;Write enemy VRAM strip (TV top edge)
	lda #$10
	jsr WriteEnemyVRAMStrip34
	;Disable video out
	jsr DisableVideoOut
	;End VRAM buffer
	lda #$00
	jsr WriteVRAMBufferCmd
	;Write VRAM buffer
	jsr WriteVRAMBuffer
	;Set PPU control register
	jsr SetScroll_SetCtrl
	;Check for end of VRAM strip
	lda ElevatorInitFlag
	bne RunGameSubmode_IntroInit_WaitVRAMStrip2
	;Set palette
	lda #$22
	sta CurPalette
	;Set fade direction
	lda #$00
	sta FadeInitFlag
	sta FadeDirection
	;Next submode ($01: Fade in)
	inc GameSubmode
	;Init TV face wave section counter
	lda #$32
	sta TVFaceWaveCounter
	;Init player sprites
	jsr InitIntroPlayerSprites
	;Load CHR banks
	lda #$6C
	sta TempCHRBanks+2
	lda #$68
	sta TempCHRBanks+4
	lda #$69
	sta TempCHRBanks+5
	;Add IRQ buffer region (TV normal)
	lda #$14
	jmp AddIRQBufferRegion

InitIntroPlayerSprites:
	;Load enemies
	ldx #$01
InitIntroPlayerSprites_Loop:
	;Check if player is active
	lda PlayerLives,x
	beq InitIntroPlayerSprites_Next
	;Load enemy slot
	ldy PlayerCharacter,x
	lda IntroPlayerSprite,y
	sta Enemy_Sprite,x
	lda #$98
	sta Enemy_Y,x
	lda IntroPlayerXPosition,y
	sta Enemy_X,x
InitIntroPlayerSprites_Next:
	;Loop for all slots
	dex
	bpl InitIntroPlayerSprites_Loop
	rts
IntroPlayerSprite:
	.db $9A,$9E
IntroPlayerXPosition:
	.db $60,$A0

;$01: Fade in
RunGameSubmode_IntroFadeIn:
	;Fade palette
	jsr FadePalette
	;Check if finished fading
	lda FadeDirection
	beq RunGameSubmode_IntroFadeIn_Exit
	;Set timer
	lda #$D0
	sta IntroEndingTimerLo
	;Next submode ($02: TV blank in)
	inc GameSubmode
RunGameSubmode_IntroFadeIn_Exit:
	rts

UpdateTVDialogAnimation:
	;Check if dialog animation enabled
	lda DialogID
	bmi UpdateTVDialogAnimation_NoDialog
	;Check for load next dialog/typing tasks
	lda DialogUpdateMode
	cmp #$01
	beq UpdateTVDialogAnimation_Dialog
	cmp #$02
	beq UpdateTVDialogAnimation_Dialog
UpdateTVDialogAnimation_NoDialog:
	;Load CHR bank
	lda #$68
	sta TempCHRBanks
	rts
UpdateTVDialogAnimation_Dialog:
	;Load CHR bank based on bits 0-2 of animation timer
	lda #$07
	sta $10
	bne UpdateTVStaticAnimation_AnyMask

UpdateTVStaticAnimation:
	;Load CHR bank based on bits 0-1 of animation timer
	lda #$03
	sta $10
UpdateTVStaticAnimation_AnyMask:
	;Increment animation timer
	inc TVStaticDialogTimer
	lda TVStaticDialogTimer
	;Load CHR bank based on animation timer
	and $10
	bne UpdateTVStaticAnimation_Exit
	inc TVStaticDialogCounter
	lda TVStaticDialogCounter
	and #$01
	tay
	lda TVAnimCHRBankTable,y
	sta TempCHRBanks
UpdateTVStaticAnimation_Exit:
	rts
TVAnimCHRBankTable:
	.db $68,$6C

DecIntroEndingTimer:
	;If timer 0, clear carry flag
	lda IntroEndingTimerHi
	ora IntroEndingTimerLo
	beq DecIntroEndingTimer_Over
	;Decrement timer
	dec IntroEndingTimerLo
	lda IntroEndingTimerLo
	cmp #$FF
	bne DecIntroEndingTimer_NoC
	dec IntroEndingTimerHi
DecIntroEndingTimer_NoOver:
	;Set carry flag
	sec
	rts
DecIntroEndingTimer_NoC:
	;If timer 0, clear carry flag
	ora IntroEndingTimerHi
	bne DecIntroEndingTimer_NoOver
DecIntroEndingTimer_Over:
	;Clear carry flag
	clc
	rts

;$02: TV blank in
RunGameSubmode_IntroTVBlankIn:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_IntroTVBlankIn_NoNext
	;Clear fadeout state
	lda #$00
	sta SoundFadeoutCounter
	sta SoundFadeoutTimer
	sta SoundFadeout
	;Set timer
	lda #$30
	sta IntroEndingTimerLo
	;Next submode ($03: TV static in)
	inc GameSubmode
	rts
RunGameSubmode_IntroTVBlankIn_NoNext:
	;Load CHR bank based on timer range
	ldy #$03
RunGameSubmode_IntroTVBlankIn_Loop:
	;Check for timer range
	lda IntroEndingTimerLo
	cmp TVBlankStaticInTimer,y
	beq RunGameSubmode_IntroTVBlankIn_Static
	;Loop for each range
	dey
	bpl RunGameSubmode_IntroTVBlankIn_Loop
	;Load CHR bank
	lda #$7E
	sta TempCHRBanks
	rts
RunGameSubmode_IntroTVBlankIn_Static:
	;If timer $30, play sound
	cmp #$30
	bne RunGameSubmode_IntroTVBlankIn_NoSound
	;Play sound
	lda #SE_TVSTATIC
	jsr LoadSound
RunGameSubmode_IntroTVBlankIn_NoSound:
	;Load CHR bank
	lda #$68
	sta TempCHRBanks
RunGameSubmode_IntroTVBlankIn_Exit:
	rts
TVBlankStaticInTimer:
	.db $0E,$10,$2E,$30

;$03: TV static in
RunGameSubmode_IntroTVStaticIn:
	;Update TV static animation
	jsr UpdateTVStaticAnimation
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_IntroTVBlankIn_Exit
	;Next submode ($04: TV scramble in)
	inc GameSubmode
	;Play sound
	lda #SE_TVSTATIC2
	jsr LoadSound
	;Set timer
	lda #$01
	sta IntroEndingTimerHi
	;Init wave scroll offset data
	ldy #$17
RunGameSubmode_IntroTVStaticIn_MidLoop:
	lda TVFaceWaveXData,y
	sta TVFaceWaveXBuffer,y
	dey
	bpl RunGameSubmode_IntroTVStaticIn_MidLoop
	ldy #$0B
RunGameSubmode_IntroTVStaticIn_LoLoop:
	lda TVFaceWaveXLoData,y
	sta TVFaceWaveXLoBuffer,y
	dey
	bpl RunGameSubmode_IntroTVStaticIn_LoLoop
	;Init TV edge sprites
	jmp InitIntroTVEdgeSprites
TVFaceWaveXData:
	.db $09,$1A,$20,$2D,$10,$06,$16,$1A,$1D,$30,$06,$2A
	.db $F7,$E6,$E0,$D3,$F0,$FA,$EA,$E6,$E3,$D0,$FA,$D6
TVFaceWaveXLoData:
	.db $C0,$00,$80,$80,$40,$80,$C0,$00,$40,$C0,$80,$40

;$04: TV scramble in
RunGameSubmode_IntroTVScrambleIn:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_IntroTVScrambleIn_NoNext
	;Update TV wave in animation
	jsr UpdateTVWaveInAnimation
	;Next submode ($05: TV wave in)
	inc GameSubmode
	;Write enemy VRAM strip (TV face)
	lda #$0C
	jsr WriteEnemyVRAMStrip34
	;Check if TV face wave IRQ buffer region is active
	lda TempIRQBufferSub
	cmp #$13
	beq RunGameSubmode_IntroTVBlankIn_Exit
	;End TV scramble animation
	jmp UpdateTVScrambleAnimation_SetWave
RunGameSubmode_IntroTVScrambleIn_NoNext:
	;If timer < $40, update TV wave in animation
	lda IntroEndingTimerLo
	cmp #$40
	bcs RunGameSubmode_IntroTVScrambleIn_NoWave
	;Update TV wave in animation
	jsr UpdateTVWaveInAnimation
RunGameSubmode_IntroTVScrambleIn_NoWave:
	;Update TV scramble animation
	jmp UpdateTVScrambleAnimation

;$05: TV wave in
RunGameSubmode_IntroTVWaveIn:
	;Check for end of VRAM strip
	lda ElevatorInitFlag
	beq RunGameSubmode_IntroTVWaveIn_NoSetVRAMStrip
	;Write enemy VRAM strip (TV face)
	jsr WriteEnemyVRAMStrip34
RunGameSubmode_IntroTVWaveIn_NoSetVRAMStrip:
	;Update TV wave in animation
	jsr UpdateTVWaveInAnimation
	;Check if already inited
	lda $10
	bne RunGameSubmode_IntroTVWaveIn_NoInit
	;Clear sound
	jsr ClearSound
	;Play music
	lda #MUSIC_SCENE0
	jsr LoadSound
	;Next submode ($06: TV dialog)
	inc GameSubmode
	;Remove IRQ buffer region (TV face wave)
	lda #$13
	jsr RemoveIRQBufferRegion
	;Clear TV edge sprites
	lda #$00
	sta Enemy_Sprite+$10
	sta Enemy_Sprite+$11
	;Set IRQ buffer height
	lda #$BF
	sta TempIRQBufferHeight
	;Update dialog
	jmp UpdateDialog
RunGameSubmode_IntroTVWaveIn_NoInit:
	;If bit 0 of global timer not 0, exit early
	lda GlobalTimer
	and #$01
	bne RunGameSubmode_IntroTVWaveIn_Exit
	;Increment start wave scroll offset data index
	jmp UpdateTVScrambleAnimation_IncT
RunGameSubmode_IntroTVWaveIn_Exit:
	rts

;$06: TV dialog
RunGameSubmode_IntroTVDialog:
	;Update player standing animation
	jsr IntroUpdatePlayerStanding
	;Update TV blink animation
	jsr UpdateTVBlinkAnimation
	;Update TV dialog animation
	jsr UpdateTVDialogAnimation
	;Check for end of dialog set
	lda DialogUpdateMode
	beq RunGameSubmode_IntroTVDialog_Next
	;Update dialog
	lda #$00
	jmp UpdateDialog
RunGameSubmode_IntroTVDialog_Next:
	;Write enemy VRAM strip (TV static)
	lda #$0E
	jsr WriteEnemyVRAMStrip34
	;Next submode ($07: TV wave out)
	inc GameSubmode
	;Init TV edge sprites
	jsr InitIntroTVEdgeSprites
	;Add IRQ buffer region (TV face wave)
	lda #$13
	jsr AddIRQBufferRegion
	;Set IRQ buffer height
	lda #$16
	sta TempIRQBufferHeight+1
	;Write enemy VRAM strip (TV static)
	lda #$0E
	jmp WriteEnemyVRAMStrip34

;$07: TV wave out
RunGameSubmode_IntroTVWaveOut:
	;Check for end of VRAM strip
	lda ElevatorInitFlag
	beq RunGameSubmode_IntroTVWaveOut_Next
	;Write enemy VRAM strip (TV static)
	jsr WriteEnemyVRAMStrip34
	;Update TV wave out animation
	jmp UpdateTVWaveOutAnimation
RunGameSubmode_IntroTVWaveOut_Next:
	;Update TV wave out animation
	jsr UpdateTVWaveOutAnimation
	;Set timer
	lda #$C0
	sta IntroEndingTimerLo
	;Next submode ($08: TV scramble out)
	inc GameSubmode
	;Clear TV scramble timer
	lda #$00
	sta TVScrambleTimer
	sta IntroEndingTimerHi
	rts

;$08: TV scramble out
RunGameSubmode_IntroTVScrambleOut:
	;Check for end of wave animation
	lda TVFaceWaveXBuffer+$09
	cmp #$30
	beq RunGameSubmode_IntroTVScrambleOut_NoWave
	;Update TV wave out animation
	jsr UpdateTVWaveOutAnimation
	jmp RunGameSubmode_IntroTVScrambleOut_DecT
RunGameSubmode_IntroTVScrambleOut_NoWave:
	;Decrement start wave scroll offset data index
	jsr UpdateTVWaveOutAnimation_DecT
RunGameSubmode_IntroTVScrambleOut_DecT:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcc RunGameSubmode_IntroTVScrambleOut_Next
	;Check for TV scramble static flag
	lda TVScrambleStaticFlag
	beq RunGameSubmode_IntroTVScrambleOut_CheckStatic
	;Increment TV scramble timer
	jsr IncTVScrambleTimer
	;Set TV scramble static flag based on TV scramble timer bits
	and TVScrambleTimerMask,y
	sta $10
	;Check if TV face wave IRQ buffer region is active
	lda TempIRQBufferSub
	cmp #$13
	beq RunGameSubmode_IntroTVScrambleOut_NoSetWave
	;Set TV wave animation
	jsr SetTVWaveAnimationSub
RunGameSubmode_IntroTVScrambleOut_NoSetWave:
	;Set TV scramble static flag based on TV scramble timer bits
	lda $10
	sta TVScrambleStaticFlag
	rts
RunGameSubmode_IntroTVScrambleOut_CheckStatic:
	;Check if TV face wave IRQ buffer region is active
	lda TempIRQBufferSub
	cmp #$13
	bne RunGameSubmode_IntroTVScrambleOut_NoSetStatic
	;Set TV static animation
	jmp UpdateTVScrambleAnimation_SetStatic
RunGameSubmode_IntroTVScrambleOut_NoSetStatic:
	;Set TV scramble static flag
	lda #$01
	sta TVScrambleStaticFlag
	;Update TV static animation
	jmp UpdateTVStaticAnimation
RunGameSubmode_IntroTVScrambleOut_Next:
	;Set timer
	lda #$20
	sta IntroEndingTimerLo
	;Clear TV edge sprites
	lda #$00
	sta Enemy_Sprite+$10
	sta Enemy_Sprite+$11
	;Next submode ($09: TV static out)
	inc GameSubmode
	bne RunGameSubmode_IntroTVScrambleOut_CheckStatic

;$09: TV static out
RunGameSubmode_IntroTVStaticOut:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_IntroTVStaticOut_NoNext
	;Update dialog
	lda #$01
	jsr UpdateDialog
	;Next submode ($0A: Player dialog)
	inc GameSubmode
RunGameSubmode_IntroTVStaticOut_NoNext:
	;Update TV static animation
	jmp UpdateTVStaticAnimation

;$0A: Player dialog
RunGameSubmode_IntroPlayerDialog:
	;Update TV static animation
	jsr UpdateTVStaticAnimation
	;Check for end of dialog set
	lda DialogUpdateMode
	beq RunGameSubmode_IntroPlayerDialog_Next
	;Update dialog
	lda #$01
	jmp UpdateDialog
RunGameSubmode_IntroPlayerDialog_Next:
	;Set fadeout counter
	lda #$06
	sta SoundFadeoutCounter
	;Next submode ($0B: Player run)
	inc GameSubmode
	;Update player animation
	ldx #$00
	jsr IntroUpdatePlayerAnimation
	ldx #$01
	jmp IntroUpdatePlayerAnimation

IntroSetPlayerAnimation:
	;Set player character
	lda #$00
	sta PlayerCharacter
	lda #$01
	sta PlayerCharacter+1
IntroSetPlayerAnimation_EntEnding:
	;Set player animation
	lda #$01
	sta PlayerAnimation
	sta PlayerAnimation+1
	;Set animation offset
	lda #$09
	sta PlayerAnimOffs
	sta PlayerAnimOffs+1
	;Clear animation timer
	lda #$00
	sta PlayerAnimTimer
	sta PlayerAnimTimer+1
	rts

IntroUpdatePlayerAnimation:
	;Update player animation
	jsr UpdatePlayerAnimation_L
	;Set player sprite
	lda PlayerSprite,x
	sta Enemy_Sprite,x
	rts

;$0B: Player run
RunGameSubmode_IntroPlayerRun:
	;Update player running animation
	jsr IntroUpdatePlayerRunning
	;Check if both players are offscreen
	lda Enemy_XHi
	beq RunGameSubmode_IntroPlayerRun_NoNext
	lda Enemy_X
	cmp #$20
	bcc RunGameSubmode_IntroPlayerRun_NoNext
	;Next submode ($0C: Fade out)
	inc GameSubmode
RunGameSubmode_IntroPlayerRun_NoNext:
	;Update TV static animation
	jmp UpdateTVStaticAnimation

IntroUpdatePlayerRunning:
	;Move players right $01
	ldx #$01
IntroUpdatePlayerRunning_Loop:
	;Check if player is active
	lda PlayerLives,x
	beq IntroUpdatePlayerRunning_Next
	;Move player right $01
	inc Enemy_X,x
	bne IntroUpdatePlayerRunning_NoC
	inc Enemy_XHi,x
IntroUpdatePlayerRunning_NoC:
	;Update player animation
	jsr IntroUpdatePlayerAnimation
IntroUpdatePlayerRunning_Next:
	;Loop for each player
	dex
	bpl IntroUpdatePlayerRunning_Loop
	rts

;$0C: Fade out
RunGameSubmode_IntroFadeOut:
	;Update TV static animation
	jsr UpdateTVStaticAnimation
RunGameSubmode_IntroFadeOut_NoStatic:
	;Set fade direction
	lda #$02
	sta FadeDirection
	;Fade palette
	jsr FadePalette
	;Check if finished fading
	lda FadeDoneFlag
	bne RunGameSubmode_IntroFadeOut_NoNext
	;Next submode ($0D: End)
	inc GameSubmode
RunGameSubmode_IntroFadeOut_NoNext:
	;Update TV static animation
	jmp UpdateTVStaticAnimation

;$0D: End
RunGameSubmode_IntroEnd:
	;Clear current level/area
	lda #$00
	sta CurLevel
	sta CurArea
	;Clear sprite boss mode flag
	sta SpriteBossModeFlag
	;Clear sound
	jsr ClearSound
	;Clear WRAM
	jsr ClearWRAM
	;Clear IRQ buffer
	jsr ClearIRQBuffer
	;Next mode ($05: Level start)
	jmp GoToNextGameMode

IntroFadeOut:
	;Fade palette
	jsr RunGameSubmode_IntroFadeOut_NoStatic
	;Check if finished fading
	lda FadeDoneFlag
	bne IntroFadeOut_Exit
	;Next submode ($0D: End)
	lda #$0D
	sta GameSubmode
IntroFadeOut_Exit:
	rts

UpdateTVWaveInAnimation:
	;Clear inited flag
	lda #$00
	sta $10
	;If wave scroll offset data not inited, exit early
	lda TVFaceWaveXLoBuffer
	ora TVFaceWaveXBuffer
	beq UpdateTVWaveInAnimation_Exit
	;Mark inited
	inc $10
	;If bit 0 of global timer not 0, exit early
	lda GlobalTimer
	and #$01
	bne UpdateTVWaveInAnimation_Exit
	;Apply wave scroll X velocity
	ldx #$0B
UpdateTVWaveInAnimation_Loop:
	;Apply wave scroll section X velocity
	lda TVFaceWaveXLoBuffer,x
	sec
	sbc TVFaceWaveXVelLoData,x
	sta TVFaceWaveXLoBuffer,x
	bcs UpdateTVWaveInAnimation_Next
	dec TVFaceWaveXBuffer,x
	txa
	clc
	adc #$0C
	tay
	lda TVFaceWaveXBuffer,y
	clc
	adc #$01
	sta TVFaceWaveXBuffer,y
UpdateTVWaveInAnimation_Next:
	;Loop for each section
	dex
	bpl UpdateTVWaveInAnimation_Loop
UpdateTVWaveInAnimation_Exit:
	rts

UpdateTVWaveOutAnimation:
	;Apply wave scroll X velocity
	ldx #$0B
UpdateTVWaveOutAnimation_Loop:
	;Apply wave scroll section X velocity
	lda TVFaceWaveXVelLoData,x
	clc
	adc TVFaceWaveXLoBuffer,x
	sta TVFaceWaveXLoBuffer,x
	bcc UpdateTVWaveOutAnimation_Next
	inc TVFaceWaveXBuffer,x
	txa
	clc
	adc #$0C
	tay
	lda TVFaceWaveXBuffer,y
	sec
	sbc #$01
	sta TVFaceWaveXBuffer,y
UpdateTVWaveOutAnimation_Next:
	;Loop for each section
	dex
	bpl UpdateTVWaveOutAnimation_Loop
UpdateTVWaveOutAnimation_DecT:
	;Decrement start wave scroll offset data index
	dec TempTVFaceWaveOffset
	bpl UpdateTVWaveOutAnimation_Exit
	lda #$17
	sta TempTVFaceWaveOffset
UpdateTVWaveOutAnimation_Exit:
	rts

TVFaceWaveXVelLoData:
	.db $30,$80,$A0,$E0,$50,$20,$70,$80,$90,$F0,$20,$D0

IncTVScrambleTimer:
	;Increment TV scramble timer
	inc TVScrambleTimer
	lda IntroEndingTimerLo
	lsr
	lsr
	lsr
	lsr
	lsr
	lsr
	tay
	lda TVScrambleTimer
	rts

UpdateTVScrambleAnimation:
	;Check for TV scramble static flag
	lda TVScrambleStaticFlag
	beq UpdateTVScrambleAnimation_SetWave
	;Increment TV scramble timer
	jsr IncTVScrambleTimer
	;Set TV scramble static flag based on TV scramble timer bits
	and TVScrambleTimerMask,y
	sta TVScrambleStaticFlag
	;Check if TV face wave IRQ buffer region is active
	lda TempIRQBufferSub
	cmp #$13
	bne UpdateTVScrambleAnimation_NoSetStatic
UpdateTVScrambleAnimation_SetStatic:
	;Remove IRQ buffer region (TV face wave)
	lda #$13
	jsr RemoveIRQBufferRegion
	;Set IRQ buffer height
	lda #$BF
	sta TempIRQBufferHeight
	;Update TV static animation
	jmp UpdateTVStaticAnimation
TVScrambleTimerMask:
	.db $01,$03,$07,$0F
UpdateTVScrambleAnimation_NoSetStatic:
	;Update TV static animation
	jsr UpdateTVStaticAnimation
	jmp UpdateTVScrambleAnimation_IncT
UpdateTVScrambleAnimation_SetWave:
	;Set TV wave animation
	jsr SetTVWaveAnimationSub
UpdateTVScrambleAnimation_IncT:
	;Increment start wave scroll offset data index
	inc TempTVFaceWaveOffset
	lda TempTVFaceWaveOffset
	cmp #$18
	bcc UpdateTVScrambleAnimation_Exit
	lda #$00
	sta TempTVFaceWaveOffset
UpdateTVScrambleAnimation_Exit:
	rts

SetTVWaveAnimationSub:
	;Add IRQ buffer region (TV face wave)
	lda #$13
	jsr AddIRQBufferRegion
	;Set IRQ buffer height
	lda #$16
	sta TempIRQBufferHeight+1
	;Set TV scramble static flag
	sta TVScrambleStaticFlag
	;Check for ending mode
	ldy #$68
	lda GameSubmode
	cmp #$0E
	bcc SetTVWaveAnimationSub_NoEnding
	ldy #$6C
SetTVWaveAnimationSub_NoEnding:
	;Load CHR bank
	sty TempCHRBanks
	rts

InitIntroTVEdgeSprites:
	;Load enemies
	ldy #$01
InitIntroTVEdgeSprites_Loop:
	;Load enemy slot
	lda IntroTVEdgeXPosition,y
	sta Enemy_X+$10,y
	lda IntroTVEdgeSprite,y
	sta Enemy_Sprite+$10,y
	lda #$19
	sta Enemy_Y+$10,y
	lda #$00
	sta Enemy_XHi+$10,y
	sta Enemy_YHi+$10,y
	;Loop for all slots
	dey
	bpl InitIntroTVEdgeSprites_Loop
	rts
IntroTVEdgeXPosition:
	.db $38,$C8
IntroTVEdgeSprite:
	.db $5C,$5D

IntroUpdatePlayerStanding:
	;Check for end of standing animation
	ldy IntroPlayerAnimOffs
	cpy #$04
	bcs IntroUpdatePlayerStanding_Exit
	sty $14
	;If bits 0-2 of animation timer not 0, skip this part
	lda IntroPlayerAnimTimer
	and #$07
	bne IntroUpdatePlayerStanding_IncT
	;Increment animation offset
	inc IntroPlayerAnimOffs
IntroUpdatePlayerStanding_EntEnding:
	;Update players standing animation
	ldx #$01
IntroUpdatePlayerStanding_Loop:
	;Check if player is active
	lda PlayerLives,x
	beq IntroUpdatePlayerStanding_Next
	;Update player standing animation
	lda PlayerCharacter,x
	asl
	asl
	ora $14
	tay
	lda IntroPlayerStandingSprite,y
	sta Enemy_Sprite,x
IntroUpdatePlayerStanding_Next:
	;Loop for each player
	dex
	bpl IntroUpdatePlayerStanding_Loop
	;Clear player props
	lda #$00
	sta Enemy_Props
	sta Enemy_Props+$01
IntroUpdatePlayerStanding_IncT:
	;Increment animation timer
	inc IntroPlayerAnimTimer
IntroUpdatePlayerStanding_Exit:
	rts
IntroPlayerStandingSprite:
	.db $9B,$9C,$9D,$9B
	.db $9F,$9F,$9F,$9F

UpdateTVBlinkAnimation:
	;Increment animation timer
	inc TVBlinkTimer
	;Write VRAM strip based on timer range
	lda TVBlinkTimer
	ldy #$03
UpdateTVBlinkAnimation_Loop:
	;Check for timer range
	cmp TVBlinkTimerTable,y
	beq UpdateTVBlinkAnimation_SetVRAMStrip
	;Loop for each range
	dey
	bpl UpdateTVBlinkAnimation_Loop
	rts
UpdateTVBlinkAnimation_SetVRAMStrip:
	;Write TV blink VRAM strip
	lda TVBlinkVRAMStripTable,y
	jmp WriteVRAMStrip
TVBlinkTimerTable:
	.db $10,$14,$18,$1C
TVBlinkVRAMStripTable:
	.db $28,$29,$28,$2A

UpdateDialog:
	;Set dialog set ID
	sta DialogSetID
	;Do jump table
	lda DialogUpdateMode
	jsr DoJumpTable
DialogJumpTable:
	.dw DialogSub0	;$00  Init
	.dw DialogSub1	;$01  Load next dialog
	.dw DialogSub2	;$02  Typing
	.dw DialogSub3	;$03  Wait for clear
	.dw DialogSub4	;$04  Clear
	.dw DialogSub5	;$05  Wait for next
;$00: Init
DialogSub0:
	;Init dialog set data index
	lda #$00
	sta DialogDataIndex
	;Next task ($01: Load next dialog)
	inc DialogUpdateMode
	rts
;$01: Load next dialog
DialogSub1:
	;Next task ($02: Typing)
	inc DialogUpdateMode
	;Get dialog set data pointer
	lda DialogSetID
	asl
	tay
	lda DialogSetPointerTable+1,y
	sta $0B
	lda DialogSetPointerTable,y
	sta $0A
	;Increment dialog set data index
	ldy DialogDataIndex
	inc DialogDataIndex
	;Check for end of dialog set
	lda ($0A),y
	cmp #$FF
	beq DialogSub1_End
	;Write dialog VRAM strip
	jmp WriteDialogVRAMStrip
DialogSub1_End:
	;Next task ($00: Init)
	lda #$00
	sta DialogUpdateMode
	rts
;$02: Typing
DialogSub2:
	;Check for end of dialog
	lda DialogWriteMode
	beq DialogSub2_Next
	;Write dialog VRAM strip
	jmp WriteDialogVRAMStrip
DialogSub2_Next:
	;Set timer
	lda #$20
	sta DialogTimer
	;Next task ($03: Wait for clear)
	inc DialogUpdateMode
	rts
;$03: Wait for clear
DialogSub3:
	;Decrement timer, check if 0
	dec DialogTimer
	bne DialogSub3_Exit
	;Next task ($04: Clear)
	inc DialogUpdateMode
	;Clear dialog VRAM strip
	lda #$00
	jmp WriteDialogVRAMStrip
DialogSub3_Exit:
	rts
;$04: Clear
DialogSub4:
	;Check for end of dialog
	lda DialogWriteMode
	beq DialogSub4_Next
	;Clear dialog VRAM strip
	jmp WriteDialogVRAMStrip
DialogSub4_Next:
	;Set timer
	lda #$10
	sta DialogTimer
	;Next task ($05: Wait for next)
	inc DialogUpdateMode
DialogSub4_Exit:
	rts
;$05: Wait for next
DialogSub5:
	;Decrement timer, check if 0
	dec DialogTimer
	beq DialogSub4_Exit
	;Next task ($01: Load next dialog)
	lda #$01
	sta DialogUpdateMode
	rts

DialogSetPointerTable:
	.dw DialogSet0Data	;$00  Intro TV dialog
	.dw DialogSet1Data	;$01  Intro player dialog
	.dw DialogSet2Data	;$02  Ending TV dialog
	.dw DialogSet3Data	;$03  Ending player dialog (Vampire)
	.dw DialogSet4Data	;$04  Ending player dialog (Monster)
	.dw DialogSet5Data	;$05  Ending player dialog (2P)
DialogSet0Data:
	.db $01,$02,$03,$FF
DialogSet1Data:
	.db $04,$05,$FF
DialogSet2Data:
	.db $08,$89,$0A,$0B,$0C,$8D,$FF
DialogSet3Data:
	.db $0E,$FF
DialogSet4Data:
	.db $0F,$FF
DialogSet5Data:
	.db $0E,$0F,$FF

WriteDialogVRAMStrip:
	;Check if already inited
	ldy DialogWriteMode
	bne WriteDialogVRAMStrip_NoInit
	;Set dialog ID
	sta DialogID
	;Get dialog data pointer
	asl
	tay
	lda DialogVRAMStripPointerTable+1,y
	sta $09
	lda DialogVRAMStripPointerTable,y
	sta $08
	;Increment dialog data pointer
	clc
	adc #$02
	sta DialogDataPointerLo
	lda $09
	adc #$00
	sta DialogDataPointerHi
	;Clear dialog text timer
	ldy #$00
	sty DialogTextTimer
	;Get VRAM address
	lda ($08),y
	sta DialogVRAMPointerLo
	sta DialogVRAMBaseLo
	iny
	lda ($08),y
	sta DialogVRAMPointerHi
	sta DialogVRAMBaseHi
	;Mark inited
	inc DialogWriteMode
	rts
WriteDialogVRAMStrip_NoInit:
	;If dialog ID 0, skip timer check
	lda DialogID
	beq WriteDialogVRAMStrip_NoWait
	;Check if bits 0-3 of dialog text timer 0
	lda DialogTextTimer
	and #$07
	beq WriteDialogVRAMStrip_NoWait
	jmp WriteDialogVRAMStrip_NoVRAMC
WriteDialogVRAMStrip_NoWait:
	;Get dialog data pointer
	tay
	lda DialogDataPointerLo
	sta $08
	lda DialogDataPointerHi
	sta $09
	;Check for command byte $FF (end dialog)
	lda ($08),y
	cmp #$FF
	beq WriteDialogVRAMStrip_EndAll
	;Check for command byte $FE (next 2 lines)
	cmp #$FE
	beq WriteDialogVRAMStrip_NextLine2
	;Check for command byte $FD (next line)
	cmp #$FD
	bne WriteDialogVRAMStrip_NoNextLine
	;Go to next line
	lda #$20
	bne WriteDialogVRAMStrip_NextLine
WriteDialogVRAMStrip_NextLine2:
	;Go to next 2 lines
	lda #$40
WriteDialogVRAMStrip_NextLine:
	;Increment VRAM address
	clc
	adc DialogVRAMBaseLo
	sta DialogVRAMBaseLo
	sta DialogVRAMPointerLo
	lda DialogVRAMBaseHi
	adc #$00
	sta DialogVRAMBaseHi
	sta DialogVRAMPointerHi
	iny
WriteDialogVRAMStrip_NoNextLine:
	;Check for ending typing/player dialog
	lda DialogID
	cmp #$07
	beq WriteDialogVRAMStrip_CheckSound
	cmp #$0E
	beq WriteDialogVRAMStrip_CheckSound
	cmp #$0F
	bne WriteDialogVRAMStrip_NoSound
WriteDialogVRAMStrip_CheckSound:
	;If space character, don't play sound
	lda ($08),y
	beq WriteDialogVRAMStrip_NoSound
	;Play sound
	lda #SE_TYPING
	jsr LoadSound
WriteDialogVRAMStrip_NoSound:
	;Init VRAM buffer row
	lda #$01
	jsr WriteVRAMBufferCmd
	;Set VRAM buffer address
	lda DialogVRAMPointerLo
	jsr WriteVRAMBufferCmd_AnyX
	lda DialogVRAMPointerHi
	jsr WriteVRAMBufferCmd_AnyX
	;Set tile in VRAM
	lda ($08),y
	jsr WriteVRAMBufferCmd_AnyX
	;End VRAM buffer
	jsr WriteVRAMBufferCmd_End
	;Increment dialog data pointer
	iny
	tya
	clc
	adc DialogDataPointerLo
	sta DialogDataPointerLo
	bcc WriteDialogVRAMStrip_NoDataC
	inc DialogDataPointerHi
WriteDialogVRAMStrip_NoDataC:
	;Increment VRAM address
	lda DialogVRAMPointerLo
	clc
	adc #$01
	sta DialogVRAMPointerLo
	bcc WriteDialogVRAMStrip_NoVRAMC
	inc DialogVRAMPointerHi
WriteDialogVRAMStrip_NoVRAMC:
	;Increment dialog text timer
	inc DialogTextTimer
	rts
WriteDialogVRAMStrip_EndAll:
	;Unmark inited
	lda #$00
	sta DialogWriteMode
	rts

DialogVRAMStripPointerTable:
	.dw DialogVRAMStripData00	;$00  Clear dialog
	.dw DialogVRAMStripData01	;$01 \Intro TV dialog
	.dw DialogVRAMStripData02	;$02 |
	.dw DialogVRAMStripData03	;$03 /
	.dw DialogVRAMStripData04	;$04 \Intro player dialog
	.dw DialogVRAMStripData05	;$05 |
	.dw DialogVRAMStripData05	;$06 /
	.dw DialogVRAMStripData07	;$07  Ending typing dialog
	.dw DialogVRAMStripData08	;$08 \Ending TV dialog
	.dw DialogVRAMStripData09	;$09 |
	.dw DialogVRAMStripData0A	;$0A |
	.dw DialogVRAMStripData0B	;$0B |
	.dw DialogVRAMStripData0C	;$0C |
	.dw DialogVRAMStripData0D	;$0D /
	.dw DialogVRAMStripData0E	;$0E \Ending player dialog
	.dw DialogVRAMStripData0F	;$0F /
	.dw DialogVRAMStripData10	;$10 \Credits
	.dw DialogVRAMStripData11	;$11 |
	.dw DialogVRAMStripData12	;$12 |
	.dw DialogVRAMStripData13	;$13 |
	.dw DialogVRAMStripData14	;$14 |
	.dw DialogVRAMStripData15	;$15 |
	.dw DialogVRAMStripData16	;$16 /
DialogVRAMStripData00:
	.dw $2B26
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $FE
	.db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.db $00,$00,$00,$00,$00,$00,$00,$00
	.db $FF
DialogVRAMStripData01:
	.dw $2B26
	;    "   H   A   !       H   A   !       H   A   !       H   A   !   !   .   .   .   .   .   . \n\n
	.db $B7,$91,$B2,$B3,$00,$91,$B2,$B3,$00,$91,$B2,$B3,$00,$91,$B2,$B3,$B3,$A7,$A7,$A7,$A7,$A7,$A7,$FE
	;    I       S   E   N   T       O   U   T       M   Y       H   E   N   C   H   M   E   N
	.db $92,$00,$9C,$8E,$97,$9D,$00,$98,$9E,$9D,$00,$96,$A2,$00,$91,$8E,$97,$8C,$91,$96,$8E,$97
	;(end dialog)
	.db $FF
DialogVRAMStripData02:
	.dw $2B26
	;    W   H   I   L   E       Y   O   U       W   E   R   E       W   A   T   C   H   I   N   G \n\n
	.db $A0,$91,$92,$95,$8E,$00,$A2,$98,$9E,$00,$A0,$8E,$9B,$8E,$00,$A0,$B2,$9D,$8C,$91,$92,$97,$90,$FE
	;    T   V   !
	.db $9D,$9F,$B3
	;(end dialog)
	.db $FF
DialogVRAMStripData03:
	.dw $2B26
	;    T   H   E   Y       W   I   L   L       D   E   F   E   A   T       Y   O   U   .   "
	.db $9D,$91,$8E,$A2,$00,$A0,$92,$95,$95,$00,$8D,$8E,$8F,$8E,$B2,$9D,$00,$A2,$98,$9E,$A7,$B7
	;(end dialog)
	.db $FF
DialogVRAMStripData04:
	.dw $2B26
	;    "   C   O   M   E       O   N   ,       W   A   R   L   O   C   K   !   ! \n\n
	.db $B7,$8C,$98,$96,$8E,$00,$98,$97,$A6,$00,$A0,$B2,$9B,$95,$98,$8C,$94,$B3,$B3,$FE
	;    W   E       W   I   L   L       B   E   A   T       Y   O   U   !   !   "
	.db $A0,$8E,$00,$A0,$92,$95,$95,$00,$8B,$8E,$B2,$9D,$00,$A2,$98,$9E,$B3,$B3,$B7
	;(end dialog)
	.db $FF
DialogVRAMStripData05:
	.dw $2B26
	;    "   Y   E   A   H   .   .   .   "
	.db $B7,$A2,$8E,$B2,$91,$A7,$A7,$A7,$B7
	;(end dialog)
	.db $FF
DialogVRAMStripData07:
	.dw $2125
	;    "   Y   O   U       D   E   F   E   A   T   E   D       Y   O   U   R       A   R   C   H \n\n
	.db $B7,$A2,$98,$9E,$00,$8D,$8E,$8F,$8E,$B2,$9D,$8E,$8D,$00,$A2,$98,$9E,$9B,$00,$B2,$9B,$8C,$91,$FE
	;    R   I   V   A   L       T   H   E       S   I   N   I   S   T   E   R \n\n
	.db $9B,$92,$9F,$B2,$95,$00,$9D,$91,$8E,$00,$9C,$92,$97,$92,$9C,$9D,$8E,$9B,$FE
	;    W   A   R   L   O   C   K   . \n\n
	.db $A0,$B2,$9B,$95,$98,$8C,$94,$A7,$FE
	;    P   E   A   C   E   F   U   L       D   A   Y   S       W   I   L   L       N   O   W \n\n
	.db $99,$8E,$B2,$8C,$8E,$8F,$9E,$95,$00,$8D,$B2,$A2,$9C,$00,$A0,$92,$95,$95,$00,$97,$98,$A0,$FE
	;    R   E   T   U   R   N       T   O       V   A   M   P   I   R   E   S       A   N   D \n\n
	.db $9B,$8E,$9D,$9E,$9B,$97,$00,$9D,$98,$00,$9F,$B2,$96,$99,$92,$9B,$8E,$9C,$00,$B2,$97,$8D,$FE
	;    M   O   N   S   T   E   R   S   .   "
	.db $96,$98,$97,$9C,$9D,$8E,$9B,$9C,$A7,$B7
	;(end dialog)
	.db $FF
DialogVRAMStripData08:
	.dw $2B26
	;    "   H   A   !       H   A   !       H   A   !   .   .   . \n\n
	.db $B7,$91,$B2,$B3,$00,$91,$B2,$B3,$00,$91,$B2,$B3,$A7,$A7,$A7,$FE
	;    I       H   A   V   E       R   E   T   U   R   N   E   D   !   "
	.db $92,$00,$91,$B2,$9F,$8E,$00,$9B,$8E,$9D,$9E,$9B,$97,$8E,$8D,$B3,$B7
	;(end dialog)
	.db $FF
DialogVRAMStripData09:
	.dw $2B26
	;    "   .   .   .   W   A   R   L   O   C   K   !   .   .   .   "
	.db $B7,$A7,$A7,$A7,$A0,$B2,$9B,$95,$98,$8C,$94,$B3,$A7,$A7,$A7,$B7
	;(end dialog)
	.db $FF
DialogVRAMStripData0A:
	.dw $2B26
	;    "   Y   O   U       T   H   O   U   G   H   T       Y   O   U \n\n
	.db $B7,$A2,$98,$9E,$00,$9D,$91,$98,$9E,$90,$91,$9D,$00,$A2,$98,$9E,$FE
	;    D   E   F   E   A   T   E   D       M   E   .
	.db $8D,$8E,$8F,$8E,$B2,$9D,$8E,$8D,$00,$96,$8E,$A7
	;(end dialog)
	.db $FF
DialogVRAMStripData0B:
	.dw $2B26
	;    I   '   M       M   U   C   H       S   T   R   O   N   G   E   R \n\n
	.db $92,$B5,$96,$00,$96,$9E,$8C,$91,$00,$9C,$9D,$9B,$98,$97,$90,$8E,$9B,$FE
	;    T   H   A   N       Y   O   U       E   X   P   E   C   T   E   D   .
	.db $9D,$91,$B2,$97,$00,$A2,$98,$9E,$00,$8E,$A1,$99,$8E,$8C,$9D,$8E,$8D,$A7
	;(end dialog)
	.db $FF
DialogVRAMStripData0C:
	.dw $2B26
	;    N   O   W       I       W   I   L   L       D   E   S   T   R   O   Y \n\n
	.db $97,$98,$A0,$00,$92,$00,$A0,$92,$95,$95,$00,$8D,$8E,$9C,$9D,$9B,$98,$A2,$FE
	;    Y   O   U   !   !   "
	.db $A2,$98,$9E,$B3,$B3,$B7
	;(end dialog)
	.db $FF
DialogVRAMStripData0D:
	.dw $2B26
	;    "   .   .   .   W   H   A   T   !   !   .   .   .   "
	.db $B7,$A7,$A7,$A7,$A0,$91,$B2,$9D,$B3,$B3,$A7,$A7,$A7,$B7
	;(end dialog)
	.db $FF
DialogVRAMStripData0E:
	.dw $2B26
	;    "   I       S   U   R   E       H   O   P   E       T   H   A   T       W   A   S     \n\n
	.db $B7,$92,$00,$9C,$9E,$9B,$8E,$00,$91,$98,$99,$8E,$00,$9D,$91,$B2,$9D,$00,$A0,$B2,$9C,$00,$FE
	;    T   H   E       F   I   N   A   L       B   A   T   T   L   E   .   "
	.db $9D,$91,$8E,$00,$8F,$92,$97,$B2,$95,$00,$8B,$B2,$9D,$9D,$95,$8E,$A7,$B7
	;(end dialog)
	.db $FF
DialogVRAMStripData0F:
	.dw $2B26
	;    "   Y   E   A   H   .   .   .   "
	.db $B7,$A2,$8E,$B2,$91,$A7,$A7,$A7,$B7
	;(end dialog)
	.db $FF
DialogVRAMStripData10:
	.dw $28AA
	;            M   O   N   S   T   E   R \n\n
	.db $00,$00,$16,$18,$17,$1C,$1D,$0E,$1B,$FE
	;    I   N       M   Y       P   O   C   K   E   T   t   m \n\n
	.db $12,$17,$00,$16,$22,$00,$19,$18,$0C,$14,$0E,$1D,$24,$25,$FE
	;      \n\n
	.db $00,$FE
	;                S   T   A   F   F
	.db $00,$00,$00,$1C,$1D,$32,$0F,$0F
	;(end dialog)
	.db $FF
DialogVRAMStripData11:
	.dw $28C9
	;            P   R   O   G   R   A   M   M   E   R \n\n
	.db $00,$00,$19,$1B,$18,$10,$1B,$32,$16,$16,$0E,$1B,$FE
	;        \n
	.db $00,$FD
	;    S   H   I   R   O   H       M   U   R   A   T   A \n\n
	.db $1C,$11,$12,$1B,$18,$11,$00,$16,$1E,$1B,$32,$1D,$32,$FE
	;    E   T   S   U   N   O   B   U       E   B   I   S   U
	.db $0E,$1D,$1C,$1E,$17,$18,$0B,$1E,$00,$0E,$0B,$12,$1C,$1E
	;(end dialog)
	.db $FF
DialogVRAMStripData12:
	.dw $28C8
	;            G   R   A   P   H   I   C   S       B   Y \n\n
	.db $00,$00,$10,$1B,$32,$19,$11,$12,$0C,$1C,$00,$0B,$22,$FE
	;    Y   O   I   C   H   I       Y   O   S   H   I   M   O   T   O \n\n
	.db $22,$18,$12,$0C,$11,$12,$00,$22,$18,$1C,$11,$12,$16,$18,$1D,$18,$FE
	;    K   E   N   J   I       F   U   J   I   O   K   A \n\n
	.db $14,$0E,$17,$13,$12,$00,$0F,$1E,$13,$12,$18,$14,$32,$FE
	;    T   A   E       Y   A   B   U
	.db $1D,$32,$0E,$00,$22,$32,$0B,$1E
	;(end dialog)
	.db $FF
DialogVRAMStripData13:
	.dw $28C8
	;            S   O   U   N   D       D   E   S   I   G   N \n\n
	.db $00,$00,$1C,$18,$1E,$17,$0D,$00,$0D,$0E,$1C,$12,$10,$17,$FE
	;        \n
	.db $00,$FD
	;    H   I   R   O   S   H   I       T   A   K   E   Y   A   S   U \n\n
	.db $11,$12,$1B,$18,$1C,$11,$12,$00,$1D,$32,$14,$0E,$22,$32,$1C,$1E,$FE
	;    K   O   Z   O       N   A   K   A   M   U   R   A
	.db $14,$18,$23,$18,$00,$17,$32,$14,$32,$16,$1E,$1B,$32
	;(end dialog)
	.db $FF
DialogVRAMStripData14:
	.dw $28C8
	;                        M   A   N   U   A   L \n\n
	.db $00,$00,$00,$00,$00,$16,$32,$17,$1E,$32,$15,$FE
	;        \n
	.db $00,$FD
	;    H   I   R   O   K   O       F   U   N   A   B   I   K   I
	.db $11,$12,$1B,$18,$14,$18,$00,$0F,$1E,$17,$32,$0B,$12,$14,$12
	;(end dialog)
	.db $FF
DialogVRAMStripData15:
	.dw $28C9
	;            P   R   O   D   U   C   E   D       B   Y \n\n
	.db $00,$00,$19,$1B,$18,$0D,$1E,$0C,$0E,$0D,$00,$0B,$22,$FE
	;        \n
	.db $00,$FD
	;    T   E   A   M \n\n
	.db $1D,$0E,$32,$16,$FE
	;    P   R   O   J   E   C   T       M   U   R   A   T   A
	.db $19,$1B,$18,$13,$0E,$0C,$1D,$00,$16,$1E,$1B,$32,$1D,$32
	;(end dialog)
	.db $FF
DialogVRAMStripData16:
	.dw $292C
	;   'T' 'H' 'E' ' ' 'E' 'N' 'D'
	.db $1D,$11,$0E,$00,$0E,$17,$0D
	;(end dialog)
	.db $FF

;ENDING MODE ROUTINES
RunGameMode_Ending:
	;Do jump table
	lda GameSubmode
	jsr DoJumpTable
EndingJumpTable:
	.dw RunGameSubmode_EndingTypingInit		;$00  Typing init
	.dw RunGameSubmode_EndingTypingFadeIn		;$01  Typing fade in
	.dw RunGameSubmode_EndingTypingMain		;$02  Typing main
	.dw RunGameSubmode_EndingTypingFadeOut		;$03  Typing fade out
	.dw RunGameSubmode_EndingInit			;$04  Init
	.dw RunGameSubmode_IntroFadeIn			;$05  Fade in
	.dw RunGameSubmode_IntroTVBlankIn		;$06  TV blank in
	.dw RunGameSubmode_IntroTVStaticIn		;$07  TV static in
	.dw RunGameSubmode_IntroTVScrambleIn		;$08  TV scramble in
	.dw RunGameSubmode_IntroTVWaveIn		;$09  TV wave in
	.dw RunGameSubmode_EndingTVDialog		;$0A  TV dialog
	.dw RunGameSubmode_EndingGameplayInitPart1	;$0B  Gameplay init part 1
	.dw RunGameSubmode_EndingGameplayInitPart2	;$0C  Gameplay init part 2
	.dw RunGameSubmode_EndingGameplayMain		;$0D  Gameplay main
	.dw RunGameSubmode_EndingVictory		;$0E  Victory
	.dw RunGameSubmode_EndingTVWaveOut		;$0F  TV wave out
	.dw RunGameSubmode_EndingTVScrambleOut		;$10  TV scramble out
	.dw RunGameSubmode_EndingTVStaticOut		;$11  TV static out
	.dw RunGameSubmode_EndingTVBlankOut		;$12  TV blank out
	.dw RunGameSubmode_EndingPlayerDialogInit	;$13  Player dialog init
	.dw RunGameSubmode_EndingPlayerDialog		;$14  Player dialog
	.dw RunGameSubmode_EndingCredits		;$15  Credits
	.dw RunGameSubmode_EndingPlayerWait		;$16  Player wait
	.dw RunGameSubmode_EndingPlayerStand		;$17  Player stand
	.dw RunGameSubmode_EndingPlayerRun		;$18  Player run
	.dw RunGameSubmode_EndingLogoWait		;$19  Logo wait
	.dw RunGameSubmode_EndingLogoInit		;$1A  Logo init
	.dw RunGameSubmode_EndingLogoFadeIn		;$1B  Logo fade in
	.dw RunGameSubmode_EndingLogoMain		;$1C  Logo main
	.dw RunGameSubmode_EndingLogoScreen		;$1D  Logo screen

;$00: Typing init
RunGameSubmode_EndingTypingInit:
	;Clear sound
	jsr ClearSound
	;Init main game
	jsr RunGameSubmode_MainGameInit
	;Clear demo flag
	lda #$00
	sta DemoFlag
	;Next submode ($00: Init)
	sta MainGameSubmode
	;Clear nametable
	jsr ClearNametableData
	;Clear scroll position
	lda TempMirror_PPUCTRL
	and #$FC
	sta TempMirror_PPUCTRL
	;Set timer
	lda #$50
	sta IntroEndingTimerLo
	;Next submode ($01: Typing fade in)
	inc GameSubmode
	;Load CHR bank
	lda #$7E
	sta TempCHRBanks+1
	;Set fade direction
	lda #$00
	sta FadeInitFlag
	sta FadeDirection
	;Clear palette
	sta CurPalette
	;Clear sound
	jsr ClearSound
	;Load music
	lda #MUSIC_SCENE1
	jmp LoadSound

;$01: Typing fade in
RunGameSubmode_EndingTypingFadeIn:
	;Fade palette
	jsr FadePalette
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingTypingFadeIn_Exit
	;Next submode ($02: Typing main)
	inc GameSubmode
	;Write dialog VRAM strip
	lda #$07
	jmp WriteDialogVRAMStrip
RunGameSubmode_EndingTypingFadeIn_Exit:
	rts

;$02: Typing main
RunGameSubmode_EndingTypingMain:
	;Check for end of dialog
	lda DialogWriteMode
	beq RunGameSubmode_EndingTypingMain_Next
	;Write dialog VRAM strip
	jmp WriteDialogVRAMStrip
RunGameSubmode_EndingTypingMain_Next:
	;Set timer
	lda #$80
	sta IntroEndingTimerLo
	;Next submode ($03: Typing fade out)
	inc GameSubmode
	rts

;$03: Typing fade out
RunGameSubmode_EndingTypingFadeOut:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingTypingFadeOut_Exit
	;Set fade direction
	lda #$02
	sta FadeDirection
	;Fade palette
	jsr FadePalette
	;Check if finished fading
	lda FadeDoneFlag
	bne RunGameSubmode_EndingTypingFadeOut_Exit
	;Next submode ($04: Init)
	inc GameSubmode
RunGameSubmode_EndingTypingFadeOut_Exit:
	rts

;$04: Init
RunGameSubmode_EndingInit:
	;Init ending cutscene
	jmp RunGameSubmode_IntroInit_EntEnding

;$0A: TV dialog
RunGameSubmode_EndingTVDialog:
	;Update player standing animation
	jsr IntroUpdatePlayerStanding
	;Update TV blink animation
	jsr UpdateTVBlinkAnimation
	;Update TV dialog animation
	jsr UpdateTVDialogAnimation
	;Check for end of dialog set
	lda DialogUpdateMode
	beq RunGameSubmode_EndingTVDialog_Next
	;Update dialog
	lda #$02
	jmp UpdateDialog
RunGameSubmode_EndingTVDialog_Next:
	;Set elevator position
	lda #$98
	sta ElevatorYPos
	;Set timer
	lda #$80
	sta IntroEndingTimerLo
	;Next submode ($03: Typing fade out)
	inc GameSubmode
	rts

;$0B: Gameplay init part 1
RunGameSubmode_EndingGameplayInitPart1:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingGameplayInitPart1_Exit
	;Next submode ($0C: Gameplay init part 2)
	inc GameSubmode
	;Init HUD row
	lda #$00
	sta HUDRowIndex
	sta HUDPositionNext
	;Draw HUD row
	jsr DrawHUDRow_L
	;Remove IRQ buffer region (TV normal)
	lda #$14
	jsr RemoveIRQBufferRegion
	;Add IRQ buffer region (Main game)
	lda #$01
	jsr AddIRQBufferRegion
	;Add IRQ buffer region (HUD)
	lda #$02
	jsr AddIRQBufferRegion
	;Set ending HUD palette offset
	lda #$01
	sta EndingHUDPaletteOffs
	;Clear timer
	lda #$00
	sta IntroEndingTimerLo
	;Clear HUD palette
	lda #$0F
	sta PaletteBuffer+$01
	sta PaletteBuffer+$02
	sta PaletteBuffer+$03
	;Write palette
	jsr WritePalette
	;Check to respawn players
	ldx #$01
RunGameSubmode_EndingGameplayInitPart1_Loop:
	;Check for respawn mode
	lda PlayerMode,x
	cmp #$02
	bne RunGameSubmode_EndingGameplayInitPart1_Next
	;Next mode ($03: Main)
	inc PlayerMode,x
	;Set player position
	lda #$98
	sta Enemy_Y,x
	ldy PlayerCharacter,x
	lda EndingPlayerXPosition,y
	sta Enemy_X,x
RunGameSubmode_EndingGameplayInitPart1_Next:
	;Loop for each player
	dex
	bpl RunGameSubmode_EndingGameplayInitPart1_Loop
RunGameSubmode_EndingGameplayInitPart1_Exit:
	rts
EndingPlayerXPosition:
	.db $60,$A0

;$0C: Gameplay init part 2
RunGameSubmode_EndingGameplayInitPart2:
	;Fade HUD palette
	jsr EndingFadeHUDPalette
	;Check if finished fading
	bpl RunGameSubmode_EndingGameplayInitPart2_Exit
	;Next submode ($0D: Gameplay main)
	inc GameSubmode
	;Set timer
	lda #$00
	sta IntroEndingTimerHi
	lda #$80
	sta IntroEndingTimerLo
	;Set ending HUD flag
	lda #$01
	sta EndingHUDFlag
	;Check to flip player X (player 1)
	lda PlayerCharacter
	beq RunGameSubmode_EndingGameplayInitPart2_NoFlipX1
	;Flip player X (player 1)
	lda #$40
	sta Enemy_Props
RunGameSubmode_EndingGameplayInitPart2_NoFlipX1:
	;Check to flip player X (player 2)
	lda PlayerCharacter+1
	beq RunGameSubmode_EndingGameplayInitPart2_NoFlipX2
	;Flip player X (player 2)
	lda #$40
	sta Enemy_Props+1
RunGameSubmode_EndingGameplayInitPart2_NoFlipX2:
	;Spawn level 7 boss
	lda #ENEMY_LEVEL7BOSS
	sta Enemy_ID+$02
	lda #$0E
	sta Enemy_Flags+$02
	lda #$48
	sta Enemy_Y+$0A
	lda #$80
	sta Enemy_X+$0A
	;Clear sound
	jsr ClearSound
	;Play music
	lda #MUSIC_BOSS2
	jmp LoadSound
RunGameSubmode_EndingGameplayInitPart2_Exit:
	rts

EndingFadeHUDPalette:
	;Increment timer
	inc IntroEndingTimerLo
	;If bits 0-2 of timer not 0, exit early
	lda IntroEndingTimerLo
	and #$07
	bne RunGameSubmode_EndingGameplayInitPart2_Exit
	;Fade HUD palette
	ldy EndingHUDPaletteOffs
	lda EndingHUDPalette1Data,y
	sta PaletteBuffer+$01
	lda EndingHUDPalette2Data,y
	sta PaletteBuffer+$02
	lda EndingHUDPalette3Data,y
	sta PaletteBuffer+$03
	;Write palette
	jsr WritePalette
	;Decrement palette data offset
	dec EndingHUDPaletteOffs
	rts
EndingHUDPalette1Data:
	.db $16,$16,$0F,$0F,$16
EndingHUDPalette2Data:
	.db $2A,$10,$0F,$0F,$10
EndingHUDPalette3Data:
	.db $20,$10,$0F,$0F,$10

;$0D: Gameplay main
RunGameSubmode_EndingGameplayMain:
	;Check to pause game
	jsr CheckPause
	;If gameplay paused, exit early
	lda PausedFlag
	bne RunGameSubmode_EndingGameplayMain_Exit
	;Update ending gameplay TV
	jsr UpdateEndingGameplayTV
	;Update main game
	jmp RunGameSubmode_MainGamePlay_NoWarp
RunGameSubmode_EndingGameplayMain_Exit:
	rts

;$0E: Victory
RunGameSubmode_EndingVictory:
	;Load CHR bank
	lda #$6C
	sta TempCHRBanks
	;Set timer
	lda #$40
	sta IntroEndingTimerLo
	;Init TV edge sprites
	jsr InitIntroTVEdgeSprites
	;Init TV wave out
	jsr RunGameSubmode_IntroTVDialog_Next
	;Update main game
	jmp RunGameSubmode_MainGamePlay_NoWarp

;$0F: TV wave out
RunGameSubmode_EndingTVWaveOut:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingTVWaveOut_NoNext
	;Update TV wave out animation
	jsr RunGameSubmode_IntroTVWaveOut
	;Update main game
	jmp RunGameSubmode_MainGamePlay_NoWarp
RunGameSubmode_EndingTVWaveOut_NoNext:
	;If timer not $01, skip this part
	lda IntroEndingTimerHi
	bne RunGameSubmode_EndingTVWaveOut_NoLoadSound
	lda IntroEndingTimerLo
	cmp #$01
	bne RunGameSubmode_EndingTVWaveOut_NoLoadSound
	;Clear sound
	jsr ClearSound
	;Play sound
	lda #SE_TVSTATIC3
	jsr LoadSound
RunGameSubmode_EndingTVWaveOut_NoLoadSound:
	;Update main game
	jmp RunGameSubmode_MainGamePlay_NoWarp

;$10: TV scramble out
RunGameSubmode_EndingTVScrambleOut:
	;Update TV scramble out animation
	jsr RunGameSubmode_IntroTVScrambleOut
	;Update main game
	jmp RunGameSubmode_MainGamePlay_NoWarp

;$11: TV static out
RunGameSubmode_EndingTVStaticOut:
	;Update TV static animation
	jsr UpdateTVStaticAnimation
	;Update player stopping animation
	jsr EndingUpdatePlayerStopping
	;Check if finished stopping
	lda $10
	bne RunGameSubmode_EndingTVStaticOut_NoNext
	;Set ending HUD palette offset
	lda #$04
	sta EndingHUDPaletteOffs
	;Clear timer
	lda #$00
	sta IntroEndingTimerLo
	;Load CHR banks
	lda #$68
	sta TempCHRBanks+4
	lda #$69
	sta TempCHRBanks+5
	;Update player standing animation
	lda #$00
	sta $14
	jsr IntroUpdatePlayerStanding_EntEnding
	;Clear sprite boss mode flag
	lda #$00
	sta SpriteBossModeFlag
	;Clear TV edge sprites
	sta Enemy_Sprite+$10
	sta Enemy_Sprite+$11
	;Next submode ($12: TV blank out)
	inc GameSubmode
	rts
RunGameSubmode_EndingTVStaticOut_NoNext:
	;Update main game
	jmp RunGameSubmode_MainGamePlay_NoWarp
EndingPlayerTVOutSprite:
	.db $9B,$9F

;$12: TV blank out
RunGameSubmode_EndingTVBlankOut:
	;Clear ending HUD flag
	lda #$00
	sta EndingHUDFlag
	;Load CHR bank
	lda #$7E
	sta TempCHRBanks
	;Fade HUD palette
	jsr EndingFadeHUDPalette
	;Check if finished fading
	bpl RunGameSubmode_EndingTVBlankOut_NoNext
	;Next submode ($13: Player dialog init)
	inc GameSubmode
	;Clear sound
	jmp ClearSound
RunGameSubmode_EndingTVBlankOut_NoNext:
	;Check if finished fading
	lda EndingHUDPaletteOffs
	cmp #$01
	bne RunGameSubmode_EndingTVBlankOut_Exit
	;Check if TV normal IRQ buffer region is active
	lda TempIRQBufferSub
	cmp #$14
	beq RunGameSubmode_EndingTVBlankOut_Exit
	;Remove IRQ buffer region (Main game)
	lda #$01
	jsr RemoveIRQBufferRegion
	;Remove IRQ buffer region (HUD)
	lda #$02
	jsr RemoveIRQBufferRegion
	;Add IRQ buffer region (TV normal)
	lda #$14
	jmp AddIRQBufferRegion
RunGameSubmode_EndingTVBlankOut_Exit:
	rts

;$13: Player dialog init
RunGameSubmode_EndingPlayerDialogInit:
	;Check if player 1 is active
	ldy #$00
	lda PlayerLives
	beq RunGameSubmode_EndingPlayerDialogInit_NoP1
	;Increment dialog set ID based on player 1 character
	ldy #$01
	lda PlayerCharacter
	beq RunGameSubmode_EndingPlayerDialogInit_NoP1
	ldy #$02
RunGameSubmode_EndingPlayerDialogInit_NoP1:
	sty $10
	;Check if player 2 is active
	ldy #$00
	lda PlayerLives+1
	beq RunGameSubmode_EndingPlayerDialogInit_NoP2
	;Increment dialog set ID based on player 2 character
	ldy #$01
	lda PlayerCharacter+1
	beq RunGameSubmode_EndingPlayerDialogInit_NoP2
	ldy #$02
RunGameSubmode_EndingPlayerDialogInit_NoP2:
	;Get dialog set data index
	tya
	ora $10
	tay
	;Next mode ($00: Init)
	lda #$00
	sta DialogUpdateMode
	;Set timer
	lda #$50
	sta IntroEndingTimerLo
	;Get dialog set ID
	lda EndingDialogSetTable-1,y
	sta EndingDialogSetID
	;Update dialog
	jsr UpdateDialog
	;Next submode ($04: Player dialog)
	inc GameSubmode
	rts
EndingPlayerDialogSprite:
	.db $9A,$9E
EndingDialogSetTable:
	.db $03,$04,$05

;$14: Player dialog
RunGameSubmode_EndingPlayerDialog:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingPlayerDialog_Exit
	;Check for end of dialog
	lda DialogUpdateMode
	beq RunGameSubmode_EndingPlayerDialog_Next
	;Update dialog
	lda EndingDialogSetID
	jmp UpdateDialog
RunGameSubmode_EndingPlayerDialog_Next:
	;Set players sprite
	ldx #$01
RunGameSubmode_EndingPlayerDialog_PlayerLoop:
	;Check if player is active
	lda PlayerLives,x
	beq RunGameSubmode_EndingPlayerDialog_PlayerNext
	;Set player sprite
	ldy PlayerCharacter,x
	lda EndingPlayerDialogSprite,y
	sta Enemy_Sprite,x
RunGameSubmode_EndingPlayerDialog_PlayerNext:
	;Loop for each player
	dex
	bpl RunGameSubmode_EndingPlayerDialog_PlayerLoop
	;Clear sound
	jsr ClearSound
	;Play music
	lda #MUSIC_CREDITS
	jsr LoadSound
	;Set timer
	lda #$80
	sta IntroEndingTimerLo
	lda #$00
	sta IntroEndingTimerHi
	;Next submode ($15: Credits)
	inc GameSubmode
	;Set dialog data index
	lda #$10
	sta DialogDataIndex
	;Write VRAM strip (TV mouth clear)
	lda #$2C
	jmp WriteVRAMStrip
RunGameSubmode_EndingPlayerDialog_Exit:
	rts

;$15: Credits
RunGameSubmode_EndingCredits:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingPlayerDialog_Exit
	;Check for end of credits
	lda CreditsUpdateMode
	bmi RunGameSubmode_EndingCredits_Next
	;Update ending credits
	jmp UpdateEndingCredits
RunGameSubmode_EndingCredits_Next:
	;Set timer
	lda #$28
	sta IntroEndingTimerLo
	;Next submode ($16: Player wait)
	inc GameSubmode
RunGameSubmode_EndingCredits_Exit:
	rts

;$16: Player wait
RunGameSubmode_EndingPlayerWait:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingCredits_Exit
	;Next submode ($17: Player stand)
	inc GameSubmode
	;Set timer
	lda #$E0
	sta IntroEndingTimerLo
	;Clear animation offset/timer
	lda #$00
	sta IntroPlayerAnimOffs
	sta IntroPlayerAnimTimer
	rts

;$17: Player stand
RunGameSubmode_EndingPlayerStand:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingCredits_Exit
	;Update player standing animation
	jsr IntroUpdatePlayerStanding
	;Check for end of standing animation
	lda IntroPlayerAnimOffs
	cmp #$04
	bcc RunGameSubmode_EndingPlayerStand_Exit
	;Set timer
	lda #$C0
	sta IntroEndingTimer2
	;Next submode ($18: Player run)
	inc GameSubmode
	;Set timer
	lda #$30
	sta IntroEndingTimerLo
	;Set player animation
	jmp IntroSetPlayerAnimation_EntEnding
RunGameSubmode_EndingPlayerStand_Exit:
	rts

;$18: Player run
RunGameSubmode_EndingPlayerRun:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingPlayerStand_Exit
	;Update player running animation
	jsr IntroUpdatePlayerRunning
	;Decrement timer, check if 0
	dec IntroEndingTimer2
	bne RunGameSubmode_EndingPlayerRun_Exit
	;Set timer
	lda #$80
	sta IntroEndingTimerLo
	;Next submode ($19: Logo wait)
	inc GameSubmode
RunGameSubmode_EndingPlayerRun_Exit:
	rts

;$19: Logo wait
RunGameSubmode_EndingLogoWait:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingPlayerRun_Exit
	;Next submode ($1A: Logo init)
	inc GameSubmode
	;Clear logo palette
	lda #$0F
	sta PaletteBuffer+$01
	sta PaletteBuffer+$02
	sta PaletteBuffer+$03
	;Write palette
	jmp WritePalette

;$1A: Logo init
RunGameSubmode_EndingLogoInit:
	;Next submode ($1B: Logo fade in)
	inc GameSubmode
	;Clear timer
	lda #$00
	sta IntroEndingTimer2
	;Set ending logo palette offset
	lda #$02
	sta EndingLogoPaletteOffs
	;Load CHR bank
	lda #$6E
	sta TempCHRBanks
	;Set timer
	lda #$F0
	sta IntroEndingTimerLo
	;Write VRAM strip (Konami logo)
	lda #$2D
	jmp WriteVRAMStrip

;$1B: Logo fade in
RunGameSubmode_EndingLogoFadeIn:
	;Increment timer
	inc IntroEndingTimer2
	;If bits 0-2 of timer not 0, exit early
	lda IntroEndingTimer2
	and #$07
	bne RunGameSubmode_EndingLogoFadeIn_Exit
	;Fade logo palette
	ldy EndingLogoPaletteOffs
	lda EndingLogoPalette1Data,y
	sta PaletteBuffer+$01
	lda EndingLogoPalette2Data,y
	sta PaletteBuffer+$02
	lda EndingLogoPalette3Data,y
	sta PaletteBuffer+$03
	;Write palette
	jsr WritePalette
	;Decrement palette data offset, check if < 0
	dec EndingLogoPaletteOffs
	bpl RunGameSubmode_EndingLogoFadeIn_Exit
	;Set timer
	lda #$E0
	sta IntroEndingTimerLo
	;Next submode ($1C: Logo main)
	inc GameSubmode
RunGameSubmode_EndingLogoFadeIn_Exit:
	rts
EndingLogoPalette1Data:
	.db $16,$06,$0F
EndingLogoPalette2Data:
	.db $27,$17,$07
EndingLogoPalette3Data:
	.db $10,$00,$0F

;$1C: Logo main
RunGameSubmode_EndingLogoMain:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcs RunGameSubmode_EndingLogoFadeIn_Exit
	;Set scroll Y position
	lda #$EF
	sta TempMirror_PPUSCROLL_Y
	lda TempMirror_PPUCTRL
	and #$FC
	sta TempMirror_PPUCTRL
	;Next submode ($1D: Logo screen)
	inc GameSubmode
	;Clear BG palette
	ldy #$0B
	lda #$0F
RunGameSubmode_EndingLogoMain_Loop:
	sta PaletteBuffer+$04,y
	dey
	bpl RunGameSubmode_EndingLogoMain_Loop
	;Write palette
	jmp WritePalette

;$1D: Logo screen
RunGameSubmode_EndingLogoScreen:
	;If scroll Y position $D0, exit early
	lda TempMirror_PPUSCROLL_Y
	cmp #$D0
	beq RunGameSubmode_EndingLogoScreen_Exit
	;Scroll up $01
	dec TempMirror_PPUSCROLL_Y
RunGameSubmode_EndingLogoScreen_Exit:
	rts

EndingUpdatePlayerStopping_NoPlayers:
	;Set stopping active flag
	inc $10
	rts
EndingUpdatePlayerStopping:
	;Clear stopping active flag
	lda #$00
	sta $10
	;If no players are active, set stopping active flag
	lda PlayerLives
	ora PlayerLives+1
	beq EndingUpdatePlayerStopping_NoPlayers
	;Update players stopping animation
	ldx #$01
EndingUpdatePlayerStopping_Loop:
	;Check if player is active
	lda PlayerLives,x
	beq EndingUpdatePlayerStopping_Next
	;Check if player is at target X position
	ldy PlayerCharacter,x
	lda Enemy_X,x
	and #$FE
	cmp EndingPlayerXPosition,y
	beq EndingUpdatePlayerStopping_NoLR
	;Check if player target X position is to left or right
	bcc EndingUpdatePlayerStopping_Right
	;Set joypad current bits LEFT
	lda #JOY_LEFT
	sta JoypadCur,x
	bne EndingUpdatePlayerStopping_NoEnd
EndingUpdatePlayerStopping_Right:
	;Set joypad current bits RIGHT
	lda #JOY_RIGHT
	sta JoypadCur,x
EndingUpdatePlayerStopping_NoEnd:
	;Set stopping active flag
	inc $10
	;Clear joypad down bits
	lda #$00
	sta JoypadDown,x
	beq EndingUpdatePlayerStopping_Next
EndingUpdatePlayerStopping_NoLR:
	;Check for main mode
	lda PlayerMode,x
	cmp #$03
	bne EndingUpdatePlayerStopping_NoPlayer
	;Check for idle state
	lda PlayerState,x
	beq EndingUpdatePlayerStopping_ClearLR
EndingUpdatePlayerStopping_NoPlayer:
	;Set stopping active flag
	inc $10
EndingUpdatePlayerStopping_ClearLR:
	;Clear joypad bits
	lda #$00
	sta JoypadCur,x
	sta JoypadDown,x
EndingUpdatePlayerStopping_Next:
	;Loop for each player
	dex
	bpl EndingUpdatePlayerStopping_Loop
	rts

UpdateEndingGameplayTV:
	;Do jump table
	lda EndingGameplayTVMode
	jsr DoJumpTable
EndingGameplayTVJumpTable:
	.dw EndingGameplayTVSub0	;$00  Shoot
	.dw EndingGameplayTVSub1	;$01  Wave
	.dw EndingGameplayTVSub2	;$02  Wait
	.dw EndingGameplayTVSub3	;$03  Victory
;$00: Shoot
EndingGameplayTVSub0_Victory:
	;Next mode ($03: Victory)
	lda #$03
	sta EndingGameplayTVMode
	rts
EndingGameplayTVSub0:
	;Check for victory
	lda VictoryFlag
	bne EndingGameplayTVSub0_Victory
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcc EndingGameplayTVSub0_Next
	;If timer >= $40, exit early
	lda IntroEndingTimerHi
	bne EndingGameplayTVSub0_NextExit
	lda IntroEndingTimerLo
	cmp #$40
	bcc EndingGameplayTVSub0_Spawn
	rts
EndingGameplayTVSub0_Next:
	;Despawn level 7 boss
	lda #$00
	sta Enemy_ID+$02
	;Init TV edge sprites
	jsr InitIntroTVEdgeSprites
	;Add IRQ buffer region (TV face wave)
	lda #$13
	jsr AddIRQBufferRegion
	;Set IRQ buffer height
	lda #$16
	sta TempIRQBufferHeight+1
	;Set timer
	lda #$90
	sta IntroEndingTimerLo
	;Next mode ($01: Wave)
	inc EndingGameplayTVMode
	;Clear enemy invincibility timer
	lda #$22
	ldx #$00
	stx Enemy_InvinTimer+$02
	;Load palette
	jsr LoadPalette
	jsr WritePalette
	;Play sound
	lda #SE_LEVEL7BOSSFIRE
	jsr LoadSound
	;Init TV edge sprites
	jmp InitIntroTVEdgeSprites
EndingGameplayTVSub0_NextExit:
	rts
EndingGameplayTVSub0_Spawn:
	;If level 7 boss fire active, exit early
	lda Level7BossFireFlag
	bne EndingGameplayTVSub0_SpawnExit
	lda Enemy_ID+$05
	ora Enemy_ID+$06
	bne EndingGameplayTVSub0_SpawnExit
	;Spawn level 7 boss fire
	lda #ENEMY_LEVEL7BOSSFIRE
	sta Enemy_ID+$03
	sta Enemy_ID+$04
	;Set level 7 boss fire flag
	inc Level7BossFireFlag
EndingGameplayTVSub0_SpawnExit:
	rts
;$01: Wave
EndingGameplayTVSub1:
	;Decrement timer, check if 0
	jsr DecIntroEndingTimer
	bcc EndingGameplayTVSub1_WaveIn
	;Check for end of wave animation
	lda TVFaceWaveXBuffer+$09
	cmp #$30
	beq EndingGameplayTVSub1_NoWaveOut
	;Update TV wave out animation
	jmp UpdateTVWaveOutAnimation
EndingGameplayTVSub1_NoWaveOut:
	;Decrement start wave scroll offset data index
	jmp UpdateTVWaveOutAnimation_DecT
EndingGameplayTVSub1_WaveIn:
	;Update TV wave in animation
	jsr UpdateTVWaveInAnimation
	;Decrement start wave scroll offset data index
	jsr UpdateTVWaveOutAnimation_DecT
	;Check if already inited
	lda $10
	bne EndingGameplayTVSub1_Exit
	;Remove IRQ buffer region (TV face wave)
	lda #$13
	jsr RemoveIRQBufferRegion
	;Set IRQ buffer height
	lda #$BF
	sta TempIRQBufferHeight
	;Clear TV edge sprites
	lda #$00
	sta Enemy_Sprite+$10
	sta Enemy_Sprite+$11
	;Clear TV blink timer
	sta TVBlinkTimer
	;Spawn level 7 boss
	lda #ENEMY_LEVEL7BOSS
	sta Enemy_ID+$02
	;Check to allow Windigo enemies to turn around at level bounds
	ldy #$01
EndingGameplayTVSub1_Loop:
	;Check for Windigo enemy
	lda Enemy_ID+$03,y
	cmp #ENEMY_WINDIGO
	bne EndingGameplayTVSub1_Next
	;Set enemy turn around flag
	lda #$F0
	sta Enemy_Temp1+$03,y
EndingGameplayTVSub1_Next:
	;Loop for each enemy
	dey
	bpl EndingGameplayTVSub1_Loop
	;Next mode ($02: Wait)
	inc EndingGameplayTVMode
EndingGameplayTVSub1_Exit:
	rts
;$02: Wait
EndingGameplayTVSub2:
	;Check for victory
	lda VictoryFlag
	bne EndingGameplayTVSub2_Victory
	;Update TV blink animation
	jsr UpdateTVBlinkAnimation
	;Check for end of blink animation
	lda TVBlinkTimer
	cmp #$20
	bcc EndingGameplayTVSub2_Exit
	;Set timer
	lda #$80
	sta IntroEndingTimerLo
	;Next mode ($00: Shoot)
	lda #$00
	sta EndingGameplayTVMode
	;Clear level 7 boss fire flag
	sta Level7BossFireFlag
EndingGameplayTVSub2_Exit:
	rts
;$03: Victory
EndingGameplayTVSub3:
	;Write enemy VRAM strip (TV face death)
	lda #$11
	jsr WriteEnemyVRAMStrip34
	;Check for end of VRAM strip
	lda ElevatorInitFlag
	bne EndingGameplayTVSub3_Exit
	;Next submode ($0E: Victory)
	inc GameSubmode
EndingGameplayTVSub3_Exit:
	rts
EndingGameplayTVSub2_Victory:
	;Next mode ($03: Victory)
	lda #$03
	sta EndingGameplayTVMode
	;Set pause disable flag
	sta PauseDisableFlag
	;Clear paused flag
	lda #$00
	sta PausedFlag
	rts

UpdateEndingCredits:
	;Do jump table
	lda CreditsUpdateMode
	jsr DoJumpTable
EndingCreditsJumpTable:
	.dw EndingCreditsSub0	;$00  Typing
	.dw EndingCreditsSub1	;$01  Wait for clear
	.dw EndingCreditsSub2	;$02  Clear part 1
	.dw EndingCreditsSub3	;$03  Clear part 2
	.dw EndingCreditsSub4	;$04  Clear part 3
	.dw EndingCreditsSub5	;$05  Clear part 4
	.dw EndingCreditsSub6	;$06  Wait for next
;$00: Typing
EndingCreditsSub0:
	;Write dialog VRAM strip
	lda CreditsDialogID
	jsr WriteDialogVRAMStrip
	;Check for end of dialog
	lda DialogWriteMode
	bne EndingCreditsSub0_Exit
	;Set timer
	lda #$30
	sta IntroEndingTimer2
	;Next mode ($01: Wait for clear)
	inc CreditsUpdateMode
	;Next dialog
	inc CreditsDialogID
	;Check for end of credits
	lda CreditsDialogID
	cmp #$17
	bcc EndingCreditsSub0_Exit
	;Set end of credits flag
	lda #$F0
	sta CreditsUpdateMode
EndingCreditsSub0_Exit:
	rts
;$01: Wait for clear
EndingCreditsSub1:
	;Decrement timer, check if 0
	dec IntroEndingTimer2
	bne EndingCreditsSub0_Exit
	;Check for "Project Murata" dialog
	lda CreditsDialogID
	cmp #$16
	bne EndingCreditsSub1_NoLogo
	;Write VRAM strip (Project Murata logo)
	lda #$2B
	jsr WriteVRAMStrip
EndingCreditsSub1_NoLogo:
	;Set timer
	lda #$C0
	sta IntroEndingTimer2
	;Next mode ($02: Clear part 1)
	inc CreditsUpdateMode
	rts
;$02: Clear part 1
EndingCreditsSub2:
	;Decrement timer, check if 0
	dec IntroEndingTimer2
	bne EndingCreditsSub0_Exit
	;Next mode ($03: Clear part 2)
	inc CreditsUpdateMode
	;Clear ending credits lines $00-$02
	lda #$02
	sta $10
EndingCreditsSub2_Loop:
	;Clear ending credits line
	jsr ClearEndingCreditsLine
	;Loop for each line
	dec $10
	bpl EndingCreditsSub2_Loop
	rts
ClearEndingCreditsLine:
	;Init VRAM buffer row
	lda #$01
	jsr WriteVRAMBufferCmd
	;Set VRAM buffer address
	ldy $10
	lda EndingCreditsLineVRAMAddrLo,y
	jsr WriteVRAMBufferCmd_AnyX
	lda EndingCreditsLineVRAMAddrHi,y
	jsr WriteVRAMBufferCmd_AnyX
	;Set clear tiles in VRAM
	ldy #$0F
	lda #$00
ClearEndingCreditsLine_Loop:
	;Set clear tile in VRAM
	jsr WriteVRAMBufferCmd_AnyX
	;Loop for each tile
	dey
	bpl ClearEndingCreditsLine_Loop
	;End VRAM buffer
	jmp WriteVRAMBufferCmd_End
EndingCreditsLineVRAMAddrLo:
	.db $A8,$C8,$E8,$08,$28,$48,$68,$88,$A8,$C8
EndingCreditsLineVRAMAddrHi:
	.db $28,$28,$28,$29,$29,$29,$29,$29,$29,$29
;$03: Clear part 2
EndingCreditsSub3:
	;Next mode ($04: Clear part 3)
	inc CreditsUpdateMode
	;Clear ending credits lines $03-$05
	lda #$03
	sta $10
EndingCreditsSub3_Loop:
	;Clear ending credits line
	jsr ClearEndingCreditsLine
	;Loop for each line
	inc $10
	lda $10
	cmp #$06
	bcc EndingCreditsSub3_Loop
	rts
;$04: Clear part 3
EndingCreditsSub4:
	;Next mode ($05: Clear part 4)
	inc CreditsUpdateMode
	;Clear ending credits lines $06-$08
	lda #$06
	sta $10
EndingCreditsSub4_Loop:
	;Clear ending credits line
	jsr ClearEndingCreditsLine
	;Loop for each line
	inc $10
	lda $10
	cmp #$09
	bcc EndingCreditsSub4_Loop
	rts
;$05: Clear part 4
EndingCreditsSub5:
	;Next mode ($06: Wait for next)
	inc CreditsUpdateMode
	;Set timer
	lda #$10
	sta IntroEndingTimer2
	;Clear ending credits line $09
	lda #$09
	sta $10
	jsr ClearEndingCreditsLine
;$06: Wait for next
EndingCreditsSub6:
	;Decrement timer, check if 0
	dec IntroEndingTimer2
	bne EndingCreditsSub6_Exit
	;Next mode ($00: Typing)
	lda #$00
	sta CreditsUpdateMode
EndingCreditsSub6_Exit:
	rts

;UNUSED SPACE
	;$12A bytes of free space available
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
	;.db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF

	.org $C000
